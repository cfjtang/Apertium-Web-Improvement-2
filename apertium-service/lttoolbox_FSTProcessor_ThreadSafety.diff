diff -urN lttoolbox.orig/lttoolbox/fst_processor.cc lttoolbox/lttoolbox/fst_processor.cc
--- lttoolbox.orig/lttoolbox/fst_processor.cc	2009-06-22 16:15:49.000000000 +0200
+++ lttoolbox/lttoolbox/fst_processor.cc	2009-06-22 16:37:20.000000000 +0200
@@ -43,10 +43,18 @@
   caseSensitive = false;
   nullFlush = false;
   nullFlushGeneration = false;
+
+  pool = new Pool<vector<int> >(4, vector<int>(50));
+
+  initial_state = new State(pool);
+  current_state = new State(pool);
 }
 
 FSTProcessor::~FSTProcessor()
 {
+  delete current_state;
+  delete initial_state;
+  delete pool;
 }
 
 void
@@ -416,7 +424,7 @@
     root.addTransition(0, 0, it->second.getInitial());
   }
 
-  initial_state.init(&root);
+  initial_state->init(&root);
 }
 
 bool
@@ -633,7 +641,7 @@
   bool last_incond = false;
   bool last_postblank = false;
   bool last_preblank = false;
-  State current_state = initial_state;
+  State current_state = *initial_state;
   wstring lf = L"";
   wstring sf = L"";
   int last = 0;
@@ -801,7 +809,7 @@
         input_buffer.back(1);
       }
 	
-      current_state = initial_state;
+      current_state = *initial_state;
       lf = L"";
       sf = L"";
       last_incond = false;
@@ -884,7 +892,7 @@
 void
 FSTProcessor::tm_analysis(FILE *input, FILE *output)
 {
-  State current_state = initial_state;
+  State current_state = *initial_state;
   wstring lf = L"";
   wstring sf = L"";
   int last = 0;
@@ -1027,7 +1035,7 @@
         input_buffer.back(1);
       }
 	
-      current_state = initial_state;
+      current_state = *initial_state;
       lf = L"";
       sf = L"";
     }
@@ -1046,7 +1054,7 @@
     generation_wrapper_null_flush(input, output, mode);
   }
 
-  State current_state = initial_state;
+  State current_state = *initial_state;
   wstring sf = L"";
  
   outOfWord = false;
@@ -1118,7 +1126,7 @@
         }
       }
   
-      current_state = initial_state;
+      current_state = *initial_state;
       sf = L"";
     }
     else if(iswspace(val) && sf.size() == 0)
@@ -1156,7 +1164,7 @@
   }
 
   bool skip_mode = true;
-  State current_state = initial_state;
+  State current_state = *initial_state;
   wstring lf = L"";
   wstring sf = L"";
   int last = 0;
@@ -1301,7 +1309,7 @@
 	  }	  
 	}
 
-	current_state = initial_state;
+	current_state = *initial_state;
 	lf = L"";
 	sf = L"";
 	skip_mode = true;
@@ -1321,7 +1329,7 @@
     transliteration_wrapper_null_flush(input, output);
   }
 
-  State current_state = initial_state;
+  State current_state = *initial_state;
   wstring lf = L"";
   wstring sf = L"";
   int last = 0;
@@ -1337,7 +1345,7 @@
       if(!lf.empty()) 
       {
         fputws_unlocked(lf.substr(1).c_str(), output);
-        current_state = initial_state;
+        current_state = *initial_state;
         lf = L"";
         sf = L"";
       }
@@ -1394,7 +1402,7 @@
             fputwc_unlocked(val, output);
           }
         }
-        current_state = initial_state;
+        current_state = *initial_state;
         lf = L"";
         sf = L"";
       }
@@ -1407,7 +1415,7 @@
 wstring
 FSTProcessor::biltrans(wstring const &input_word, bool with_delim)
 {
-  State current_state = initial_state;
+  State current_state = *initial_state;
   wstring result = L"";
   unsigned int start_point = 1;
   unsigned int end_point = input_word.size()-2;
@@ -1570,7 +1578,7 @@
 pair<wstring, int>
 FSTProcessor::biltransWithQueue(wstring const &input_word, bool with_delim)
 {
-  State current_state = initial_state;
+  State current_state = *initial_state;
   wstring result = L"";
   unsigned int start_point = 1;
   unsigned int end_point = input_word.size()-2;
@@ -1733,7 +1741,7 @@
 wstring
 FSTProcessor::biltransWithoutQueue(wstring const &input_word, bool with_delim)
 {
-  State current_state = initial_state;
+  State current_state = *initial_state;
   wstring result = L"";
   unsigned int start_point = 1;
   unsigned int end_point = input_word.size()-2;
@@ -1856,14 +1864,14 @@
 bool
 FSTProcessor::valid() const
 {
-  if(initial_state.isFinal(all_finals))
+  if(initial_state->isFinal(all_finals))
   {
     wcerr << L"Error: Invalid dictionary (hint: the left side of an entry is empty)" << endl;
     return false;
   }
   else
   {
-    State s = initial_state;
+    State s = *initial_state;
     s.step(L' ');
     if(s.size() != 0)
     {
@@ -1947,7 +1955,7 @@
 {
   bool last_incond = false;
   bool last_postblank = false;
-  State current_state = initial_state;
+  State current_state = *initial_state;
   wstring lf = L"";
   wstring sf = L"";
   int last = 0;
@@ -2084,7 +2092,7 @@
         input_buffer.back(1);
       }
 	
-      current_state = initial_state;
+      current_state = *initial_state;
       lf = L"";
       sf = L"";
       last_incond = false;
diff -urN lttoolbox.orig/lttoolbox/fst_processor.h lttoolbox/lttoolbox/fst_processor.h
--- lttoolbox.orig/lttoolbox/fst_processor.h	2009-06-22 16:15:49.000000000 +0200
+++ lttoolbox/lttoolbox/fst_processor.h	2009-06-22 16:37:20.000000000 +0200
@@ -56,15 +56,17 @@
    */
   map<wstring, TransExe, Ltstr> transducers;
 
+  Pool<vector<int> > *pool;
+
   /**
    * Current state of lexical analysis
    */
-  State current_state;
+  State *current_state;
 
   /**
    * Initial state of every token
    */
-  State initial_state;
+  State *initial_state;
 
   /**
    * Set of final states of inconditional sections in the dictionaries
diff -urN lttoolbox.orig/lttoolbox/state.cc lttoolbox/lttoolbox/state.cc
--- lttoolbox.orig/lttoolbox/state.cc	2009-06-22 16:15:49.000000000 +0200
+++ lttoolbox/lttoolbox/state.cc	2009-06-22 16:37:13.000000000 +0200
@@ -21,10 +21,9 @@
 #include <cstring>
 #include <cwctype>
 
-Pool<vector<int> > State::pool(4, vector<int>(50));
-
-State::State()
+State::State(Pool<vector<int> > *p)
 {
+  pool = p;
 }
  
 State::~State()
@@ -55,7 +54,7 @@
   // release references
   for(size_t i = 0, limit = state.size(); i != limit; i++)
   {
-    pool.release(state[i].sequence);
+    pool->release(state[i].sequence);
   }
 
   state.clear();
@@ -67,14 +66,15 @@
   // release references
   for(size_t i = 0, limit = state.size(); i != limit; i++)
   {
-    pool.release(state[i].sequence);
+    pool->release(state[i].sequence);
   }
 
   state = s.state;
+  pool = s.pool;
 
   for(size_t i = 0, limit = state.size(); i != limit; i++)
   {
-    vector<int> *tmp = pool.get();
+    vector<int> *tmp = pool->get();
     *tmp = *(state[i].sequence);
     state[i].sequence = tmp;
   }
@@ -90,7 +90,7 @@
 State::init(Node *initial)
 {
   state.clear();
-  state.push_back(TNodeState(initial,pool.get(),false));
+  state.push_back(TNodeState(initial,pool->get(),false));
   state[0].sequence->clear();
   epsilonClosure();  
 }  
@@ -113,7 +113,7 @@
     {
       for(int j = 0; j != it->second.size; j++)
       {
-        vector<int> *new_v = pool.get();
+        vector<int> *new_v = pool->get();
         *new_v = *(state[i].sequence);
         if(it->first != 0)
         {
@@ -122,7 +122,7 @@
         new_state.push_back(TNodeState(it->second.dest[j], new_v, state[i].dirty||false));
       }
     }
-    pool.release(state[i].sequence);
+    pool->release(state[i].sequence);
   }
   
   state = new_state;
@@ -147,7 +147,7 @@
     {
       for(int j = 0; j != it->second.size; j++)
       {
-        vector<int> *new_v = pool.get();
+        vector<int> *new_v = pool->get();
         *new_v = *(state[i].sequence);
         if(it->first != 0)
         {
@@ -161,7 +161,7 @@
     {
       for(int j = 0; j != it->second.size; j++)
       {
-        vector<int> *new_v = pool.get();
+        vector<int> *new_v = pool->get();
         *new_v = *(state[i].sequence);
         if(it->first != 0)
         {
@@ -170,7 +170,7 @@
         new_state.push_back(TNodeState(it->second.dest[j], new_v, true));
       }
     }
-    pool.release(state[i].sequence);
+    pool->release(state[i].sequence);
   }
 
   state = new_state;
@@ -187,7 +187,7 @@
     {
       for(int j = 0 ; j != it2->second.size; j++)
       {
-        vector<int> *tmp = pool.get();
+        vector<int> *tmp = pool->get();
         *tmp = *(state[i].sequence);
         if(it2->second.out_tag[j] != 0)
         {
diff -urN lttoolbox.orig/lttoolbox/state.h lttoolbox/lttoolbox/state.h
--- lttoolbox.orig/lttoolbox/state.h	2009-06-22 16:15:49.000000000 +0200
+++ lttoolbox/lttoolbox/state.h	2009-06-22 16:37:13.000000000 +0200
@@ -60,7 +60,7 @@
   /**
    * Pool of wchar_t vectors, for efficience (static class)
    */
-  static Pool<vector<int> > pool;  
+  Pool<vector<int> > *pool;  
 
   /**
    * Copy function
@@ -96,7 +96,7 @@
   /**
    * Constructor
    */
-  State();
+  State(Pool<vector<int> > *);
 
   /**
    * Destructor
