// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "apertium.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
ApertiumService::LanguagePairType::operator>>= (cdrStream &_n) const
{
  _n.marshalString(srcLang,0);
  _n.marshalString(destLang,0);

}

void
ApertiumService::LanguagePairType::operator<<= (cdrStream &_n)
{
  srcLang = _n.unmarshalString(0);
  destLang = _n.unmarshalString(0);

}

void
ApertiumService::TranslationWithDetectionType::operator>>= (cdrStream &_n) const
{
  _n.marshalString(detectedSourceLanguage,0);
  _n.marshalString(translation,0);

}

void
ApertiumService::TranslationWithDetectionType::operator<<= (cdrStream &_n)
{
  detectedSourceLanguage = _n.unmarshalString(0);
  translation = _n.unmarshalString(0);

}

void
ApertiumService::TranslationType::operator>>= (cdrStream& _n) const
{
  _n.marshalBoolean(_pd__d);

  switch(_pd__d) {
    case 1:
      (const TranslationWithDetectionType&) _pd_translationWithDetection >>= _n;
      break;
    case 0:
      _n.marshalString(_pd_translation,0);
      break;
#ifndef HAS_Cplusplus_Bool
      default: break;
#endif

  
  }


}

void
ApertiumService::TranslationType::operator<<= (cdrStream& _n)
{
  _pd__d = _n.unmarshalBoolean();

  switch(_pd__d) {
    case 1:
      _pd__default = 0;
      (TranslationWithDetectionType&)_pd_translationWithDetection <<= _n;
      break;
    case 0:
      _pd__default = 0;
      _pd_translation = _n.unmarshalString(0);
      break;

  }
  _pd__initialised = 1;
}

::CORBA::Exception::insertExceptionToAny ApertiumService::Apertium::ApertiumRuntimeException::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP ApertiumService::Apertium::ApertiumRuntimeException::insertToAnyFnNCP = 0;

ApertiumService::Apertium::ApertiumRuntimeException::ApertiumRuntimeException(const ApertiumService::Apertium::ApertiumRuntimeException& _s) : ::CORBA::UserException(_s)
{
  reason = _s.reason;

}

ApertiumService::Apertium::ApertiumRuntimeException::ApertiumRuntimeException(const char* _reason)
{
  pd_insertToAnyFn    = ApertiumService::Apertium::ApertiumRuntimeException::insertToAnyFn;
  pd_insertToAnyFnNCP = ApertiumService::Apertium::ApertiumRuntimeException::insertToAnyFnNCP;
  reason = _reason;

}



ApertiumService::Apertium::ApertiumRuntimeException& ApertiumService::Apertium::ApertiumRuntimeException::operator=(const ApertiumService::Apertium::ApertiumRuntimeException& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  reason = _s.reason;

  return *this;
}

ApertiumService::Apertium::ApertiumRuntimeException::~ApertiumRuntimeException() {}

void ApertiumService::Apertium::ApertiumRuntimeException::_raise() const { throw *this; }

const char* ApertiumService::Apertium::ApertiumRuntimeException::_PD_repoId = "IDL:ApertiumService/Apertium/ApertiumRuntimeException:1.0";
const char* ApertiumService::Apertium::ApertiumRuntimeException::_PD_typeId = "Exception/UserException/ApertiumService::Apertium::ApertiumRuntimeException";

ApertiumService::Apertium::ApertiumRuntimeException* ApertiumService::Apertium::ApertiumRuntimeException::_downcast(::CORBA::Exception* _e) {
  return (ApertiumRuntimeException*) _NP_is_a(_e, _PD_typeId);
}

const ApertiumService::Apertium::ApertiumRuntimeException* ApertiumService::Apertium::ApertiumRuntimeException::_downcast(const ::CORBA::Exception* _e) {
  return (const ApertiumRuntimeException*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* ApertiumService::Apertium::ApertiumRuntimeException::_NP_duplicate() const {
  return new ApertiumRuntimeException(*this);
}

const char* ApertiumService::Apertium::ApertiumRuntimeException::_NP_typeId() const {
  return _PD_typeId;
}

const char* ApertiumService::Apertium::ApertiumRuntimeException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:ApertiumService/Apertium/ApertiumRuntimeException:1.0");
  return _PD_repoId;
}
 
void ApertiumService::Apertium::ApertiumRuntimeException::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
ApertiumService::Apertium::ApertiumRuntimeException::operator>>= (cdrStream& _n) const
{
  _n.marshalString(reason,0);

}

void
ApertiumService::Apertium::ApertiumRuntimeException::operator<<= (cdrStream& _n)
{
  reason = _n.unmarshalString(0);

}

ApertiumService::Apertium_ptr ApertiumService::Apertium_Helper::_nil() {
  return ::ApertiumService::Apertium::_nil();
}

::CORBA::Boolean ApertiumService::Apertium_Helper::is_nil(::ApertiumService::Apertium_ptr p) {
  return ::CORBA::is_nil(p);

}

void ApertiumService::Apertium_Helper::release(::ApertiumService::Apertium_ptr p) {
  ::CORBA::release(p);
}

void ApertiumService::Apertium_Helper::marshalObjRef(::ApertiumService::Apertium_ptr obj, cdrStream& s) {
  ::ApertiumService::Apertium::_marshalObjRef(obj, s);
}

ApertiumService::Apertium_ptr ApertiumService::Apertium_Helper::unmarshalObjRef(cdrStream& s) {
  return ::ApertiumService::Apertium::_unmarshalObjRef(s);
}

void ApertiumService::Apertium_Helper::duplicate(::ApertiumService::Apertium_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

ApertiumService::Apertium_ptr
ApertiumService::Apertium::_duplicate(::ApertiumService::Apertium_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

ApertiumService::Apertium_ptr
ApertiumService::Apertium::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


ApertiumService::Apertium_ptr
ApertiumService::Apertium::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

ApertiumService::Apertium_ptr
ApertiumService::Apertium::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_Apertium _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_Apertium* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_Apertium;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* ApertiumService::Apertium::_PD_repoId = "IDL:ApertiumService/Apertium:1.0";


ApertiumService::_objref_Apertium::~_objref_Apertium() {
  
}


ApertiumService::_objref_Apertium::_objref_Apertium(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::ApertiumService::Apertium::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
ApertiumService::_objref_Apertium::_ptrToObjRef(const char* id)
{
  if( id == ::ApertiumService::Apertium::_PD_repoId )
    return (::ApertiumService::Apertium_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::ApertiumService::Apertium::_PD_repoId) )
    return (::ApertiumService::Apertium_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cApertiumService_mTranslationType_i_cstring_i_cstring_i_cstring_e_cApertiumService_mApertium_mApertiumRuntimeException
class _0RL_cd_58625cdf9fe9f441_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_58625cdf9fe9f441_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  ::CORBA::String_var arg_2_;
  const char* arg_2;
  ApertiumService::TranslationType_var result;
};

void _0RL_cd_58625cdf9fe9f441_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);
  _n.marshalString(arg_2,0);

}

void _0RL_cd_58625cdf9fe9f441_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();
  arg_2_ = _n.unmarshalString(0);
  arg_2 = arg_2_.in();

}

void _0RL_cd_58625cdf9fe9f441_00000000::marshalReturnedValues(cdrStream& _n)
{
  (const ApertiumService::TranslationType&) result >>= _n;

}

void _0RL_cd_58625cdf9fe9f441_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new ApertiumService::TranslationType;
  (ApertiumService::TranslationType&)result <<= _n;

}

const char* const _0RL_cd_58625cdf9fe9f441_00000000::_user_exns[] = {
  ApertiumService::Apertium::ApertiumRuntimeException::_PD_repoId
};

void _0RL_cd_58625cdf9fe9f441_00000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, ApertiumService::Apertium::ApertiumRuntimeException::_PD_repoId) ) {
    ApertiumService::Apertium::ApertiumRuntimeException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_58625cdf9fe9f441_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_58625cdf9fe9f441_00000000* tcd = (_0RL_cd_58625cdf9fe9f441_00000000*)cd;
  ApertiumService::_impl_Apertium* impl = (ApertiumService::_impl_Apertium*) svnt->_ptrToInterface(ApertiumService::Apertium::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->translate(tcd->arg_0, tcd->arg_1, tcd->arg_2);
#else
  if (!cd->is_upcall())
    tcd->result = impl->translate(tcd->arg_0, tcd->arg_1, tcd->arg_2);
  else {
    try {
      tcd->result = impl->translate(tcd->arg_0, tcd->arg_1, tcd->arg_2);
    }
    catch(ApertiumService::Apertium::ApertiumRuntimeException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

ApertiumService::TranslationType* ApertiumService::_objref_Apertium::translate(const char* text, const char* srcLang, const char* destLang)
{
  _0RL_cd_58625cdf9fe9f441_00000000 _call_desc(_0RL_lcfn_58625cdf9fe9f441_10000000, "translate", 10);
  _call_desc.arg_0 = text;
  _call_desc.arg_1 = srcLang;
  _call_desc.arg_2 = destLang;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cstring_e_cApertiumService_mApertium_mApertiumRuntimeException
class _0RL_cd_58625cdf9fe9f441_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_58625cdf9fe9f441_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var result;
};

void _0RL_cd_58625cdf9fe9f441_20000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);

}

void _0RL_cd_58625cdf9fe9f441_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();

}

void _0RL_cd_58625cdf9fe9f441_20000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_58625cdf9fe9f441_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

const char* const _0RL_cd_58625cdf9fe9f441_20000000::_user_exns[] = {
  ApertiumService::Apertium::ApertiumRuntimeException::_PD_repoId
};

void _0RL_cd_58625cdf9fe9f441_20000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, ApertiumService::Apertium::ApertiumRuntimeException::_PD_repoId) ) {
    ApertiumService::Apertium::ApertiumRuntimeException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_58625cdf9fe9f441_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_58625cdf9fe9f441_20000000* tcd = (_0RL_cd_58625cdf9fe9f441_20000000*)cd;
  ApertiumService::_impl_Apertium* impl = (ApertiumService::_impl_Apertium*) svnt->_ptrToInterface(ApertiumService::Apertium::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->detect(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->detect(tcd->arg_0);
  else {
    try {
      tcd->result = impl->detect(tcd->arg_0);
    }
    catch(ApertiumService::Apertium::ApertiumRuntimeException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

char* ApertiumService::_objref_Apertium::detect(const char* mesg)
{
  _0RL_cd_58625cdf9fe9f441_20000000 _call_desc(_0RL_lcfn_58625cdf9fe9f441_30000000, "detect", 7);
  _call_desc.arg_0 = mesg;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cApertiumService_mLanguagePairsType_e_cApertiumService_mApertium_mApertiumRuntimeException
class _0RL_cd_58625cdf9fe9f441_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_58625cdf9fe9f441_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  ApertiumService::LanguagePairsType_var result;
};

void _0RL_cd_58625cdf9fe9f441_40000000::marshalReturnedValues(cdrStream& _n)
{
  (const ApertiumService::LanguagePairsType&) result >>= _n;

}

void _0RL_cd_58625cdf9fe9f441_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new ApertiumService::LanguagePairsType;
  (ApertiumService::LanguagePairsType&)result <<= _n;

}

const char* const _0RL_cd_58625cdf9fe9f441_40000000::_user_exns[] = {
  ApertiumService::Apertium::ApertiumRuntimeException::_PD_repoId
};

void _0RL_cd_58625cdf9fe9f441_40000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, ApertiumService::Apertium::ApertiumRuntimeException::_PD_repoId) ) {
    ApertiumService::Apertium::ApertiumRuntimeException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_58625cdf9fe9f441_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_58625cdf9fe9f441_40000000* tcd = (_0RL_cd_58625cdf9fe9f441_40000000*)cd;
  ApertiumService::_impl_Apertium* impl = (ApertiumService::_impl_Apertium*) svnt->_ptrToInterface(ApertiumService::Apertium::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->languagePairs();
#else
  if (!cd->is_upcall())
    tcd->result = impl->languagePairs();
  else {
    try {
      tcd->result = impl->languagePairs();
    }
    catch(ApertiumService::Apertium::ApertiumRuntimeException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

ApertiumService::LanguagePairsType* ApertiumService::_objref_Apertium::languagePairs()
{
  _0RL_cd_58625cdf9fe9f441_40000000 _call_desc(_0RL_lcfn_58625cdf9fe9f441_50000000, "languagePairs", 14);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
ApertiumService::_pof_Apertium::~_pof_Apertium() {}


omniObjRef*
ApertiumService::_pof_Apertium::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::ApertiumService::_objref_Apertium(ior, id);
}


::CORBA::Boolean
ApertiumService::_pof_Apertium::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::ApertiumService::Apertium::_PD_repoId) )
    return 1;
  
  return 0;
}

const ApertiumService::_pof_Apertium _the_pof_ApertiumService_mApertium;

ApertiumService::_impl_Apertium::~_impl_Apertium() {}


::CORBA::Boolean
ApertiumService::_impl_Apertium::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "translate") ) {

    _0RL_cd_58625cdf9fe9f441_00000000 _call_desc(_0RL_lcfn_58625cdf9fe9f441_10000000, "translate", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "detect") ) {

    _0RL_cd_58625cdf9fe9f441_20000000 _call_desc(_0RL_lcfn_58625cdf9fe9f441_30000000, "detect", 7, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "languagePairs") ) {

    _0RL_cd_58625cdf9fe9f441_40000000 _call_desc(_0RL_lcfn_58625cdf9fe9f441_50000000, "languagePairs", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
ApertiumService::_impl_Apertium::_ptrToInterface(const char* id)
{
  if( id == ::ApertiumService::Apertium::_PD_repoId )
    return (::ApertiumService::_impl_Apertium*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::ApertiumService::Apertium::_PD_repoId) )
    return (::ApertiumService::_impl_Apertium*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
ApertiumService::_impl_Apertium::_mostDerivedRepoId()
{
  return ::ApertiumService::Apertium::_PD_repoId;
}

ApertiumService::_sk_Apertium::_sk_Apertium(const omniOrbBoaKey& k) { pd_key = k; }

ApertiumService::_sk_Apertium::~_sk_Apertium() {}

POA_ApertiumService::Apertium::~Apertium() {}

