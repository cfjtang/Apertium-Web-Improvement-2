#
# Note: This is currently not a real "Constraint Grammar", but more 
#       of a tool to hack around the badly trained HMM POS tagger.
#
################## IMPORTANT #####################
# If a rule is not having any effect, it may be because it is order-dependent
# Try moving it up the pile and see if that works.
##################################################

DELIMITERS = "<.>" "<!>" "<?>" (sent); # end-of-sentence markers

# give Apertium tags a mnemonic to be used in the rules


# mutation for individual letters
# surface form regex, base form regex

LIST MSoftC = ("<g.*>"ri "c.*"ri)  ("<d.*>"ri "t.*"ri) ("<f.*>"ri "b.*"ri)  ("<w.*>"ri "gw.*"ri) ("<b.*>"ri "p.*"ri) ("<dd.*>"ri "d.*"ri) ("<f.*>"ri "m.*"ri);		# soft mutation

LIST MAspC = ("<ch.*>"ri "c.*"ri) ("<th.*>"ri "t.*"ri);		# aspirate mutation

LIST MNasC = ("<n.*>"ri "d.*"ri) ("<m.*>"ri "b.*"ri);		# nasal mutation


# nouns

LIST NC = n; 				# common nouns
LIST NP = (np top) (np ant) (np cog);		# proper nouns (toponyms, anthroponyms, cognomens)
LIST Ant = (np ant);		# anthroponyms
LIST Acr = (n acr);

LIST MF = mf;		# masculine/feminine
LIST M = m;			# masculine
LIST F = f;			# feminine


# pronouns

LIST PrnSubj = (prn subj);		# subject pronoun
LIST Prn = (prn tn) (prn subj);		# pronoun


# verbs

LIST V = vaux vblex vbser vbmod;		 	# lexical verbs and "to be"
LIST VblexInf = (vblex inf);		# verb in the infinitive
LIST VblexPrs = (vblex prs);		# verb in the present subjunctive
LIST Imp = imp;		# imperative
LIST VbMod = (vbmod);		# modal verb (eg gallu)
LIST Oes = (vbser sp); 		# oes

LIST Vpart = (vpart neg) (vpart aff) (vpart itg); # Verbal particles

LIST P1Sg = (p1 sg);		# first person singular - verb agreement
LIST P3Sg = (p3 sg);		# third person singular - verb agreement
LIST P1Pl = (p1 pl);		# first person plural - verb agreement
LIST P2Pl = (p2 pl);		# second person plural - verb agreement

LIST PrnSubjP1Sg = (prn subj p1 sg);

LIST vb_1_sg = (vblex p1 sg);
LIST be_1_sg = (vbser p1 sg);


SET PrnSubjP3Sg = PrnSubj + P3Sg;
SET PrnSubjP1Pl = PrnSubj + P1Pl;
SET PrnSubjP2Pl = PrnSubj + P2Pl;

SET VbP1Sg = V + P1Sg;
SET VbP2Pl = V + P2Pl;




# determiners and possessive pronouns

LIST Det = (det);		# determiner
LIST Def = def;		# definite
# ? can above two be deleted in view of below ?
LIST DetDef = (det def);		# definite determiner (article)
LIST DetPos = (det pos);		# possessive determiner
LIST DetDem = (det dem);		# demonstrative determiner
LIST DetItg = (det itg);		# interrogative determiner
LIST DetQnt = (det qnt);		# quantifying determiner

#SET DetPosNE = DetPos - (+ei);


# adjectives and numerals

LIST Adj = (adj sint) (adj); 		# all adjectives (synthetic + non-synthetic)
LIST Num = num;				# numeral


# prepositions

LIST Pr = pr;		# preposition
LIST Prep_i = ("i" pr);		# the preposition "i" (to)
LIST Prep_yn_ôl = ("yn ôl" pr) ("Yn ôl" pr);		# the preposition "yn ôl"
LIST prep_yn = ("yn" pr);		# the preposition "yn" (in)


# adverbs

LIST Adv = adv;		# adverb
LIST Int = adv itg;		# interrogative adverb (eg where?)


# conjunctions

LIST CC = cnjcoo; 			# co-ordinate conjunction
LIST CS = cnjsub;			# subordinate conjunction

SET Conj = CC + CS;


# interjections

LIST Interj = ij;			# interjection


SECTION


#Yn ôl Ms Thomas
REMOVE Adv IF (0 Prep_yn_ôl) (1 Ant);

#dawnsio yn y cae
SELECT NC IF (-1 DetDef) (0 NC) (0 V);

# choose verbal partical if sandwiched between Conj + verb
SELECT Vpart IF ((-1 CC) OR (-1 CS) OR (NOT -1 (vblex))) 
		((1 (vblex)) OR (1 (vbser)) OR (1 (vbmod)) OR (1 (vaux))) 
		(NOT 1 (vblex inf)) (NOT 1 (n)) (NOT 1 Num) (NOT 0 CC);

SELECT Vpart IF ((-1 (cm)) OR (NOT -1 (vblex))) ((1 (vblex)) OR (1 (vbser))) (NOT 1 (vblex inf)) (NOT 1 Num) (NOT 0 CC);
SELECT (vbser cns) IF (-1 Vpart);

REMOVE Vpart IF (-1 V) (1 NC);

#This is horrible:
#nid oes llawer o'r rheiny ar ôl
SELECT (vbser) IF (0 NC) (0 (vbser)) (1 DetQnt) (2 DetDef);


# choose a 1p.sg pronoun if it is preceded by 1p.sg bod
# rydw i'n anfon - i'n should be seen as pronoun + yn, not as prep + ein - I am sending
SELECT PrnSubjP1Sg IF (-1 be_1_sg) (0 Prep_i) (0 PrnSubjP1Sg);

# choose the preposition "i" if it is followed by an infinitive
# aeth i gael y pres - he went to get the money
# aethom i gael y pres - we went to get the money
# the first is alright without this rule, the second isn't
SELECT Prep_i IF (NOT -1 vb_1_sg) (0 Prep_i) (0 PrnSubjP1Sg);

# We need more work to differentiate between
# cerddaf i'r dre - I'll walk to the town (prep + yr)
# and
# wela i'r dyn fory - I'll see the man tomorrow (prn + yr)
# May not even be possible without some marker of case.


#Rydan ni wedi sefydlu meini prawf newydd, ystyried y ffordd ymlaen. 
SELECT PrnSubjP1Pl IF (-1 P1Pl) (-1 V);



#tra bod
REMOVE ("tra" adv) IF (NOT 1 Adj);

#Early removal of impossible aspirate mutations.
#Gobeithio bod popeth yn iawn gyda chi
REMOVE MAspC IF (NOT -1 ("ei")) (NOT -1 ("a" cnjcoo)) 
		(NOT -1 ("â")) (NOT -1 ("chwech"));

# delete a subject pronoun if preceded by an infinitive
# i'w weld fo
# NOT: mynd â chi ar
REMOVE PrnSubj IF (-1 VblexInf) (NOT 0 MAspC);

#mynd â chi ar
REMOVE MAspC IF (-1 (vblex)) (0 MAspC) (0 PrnSubj);
REMOVE MAspC IF (-1 (n)) (0 MAspC) (0 PrnSubj);

# delete a noun from a {noun, pronoun} cohort if preceded by an infinitive and followed by a preposition
# i'w weld fo yn y dref
REMOVE NC IF (-1 V) (0 NC) (0 PrnSubj) (1 Pr);

# delete a noun from a {vbmod, noun} cohort if preceded by a preposition
# this may be cast too widely - let's see ...
# yn gallu dod (able to come) - *in capacity come
REMOVE NC IF (-1 Pr) (0 NC) (0 VbMod);

# delete a noun from a {verb, noun} cohort if preceded by a verbal particle
# nad oes (that there is not) - *not age
REMOVE NC IF (-1 Vpart) (0 NC) (0 V);


REMOVE:R_yna_det ("yna" det) OR ("yma" det) (NOT -2 DetDef);
# as analogue of rule below - can they be combined?
# mae 'na le yma (there is a place here) - *that place is here.
# with above rule, we get "is there place here" - acceptable if we can get rid of question word-order
# perhaps keep this rule, but do a multiword for "mae 'na = there is", since it is a bit odd, and Englishy
# compare (better) "mae lle yma" - "*place is here"
#REMOVE ("yma" det) IF (NOT -2 DetDef);
# choose the "where" (adv, itg) sense for lle only if it is followed by a verb
# a oes lle yma? (is there room (a place) here?) - *and there are where here.
REMOVE Int IF (NOT 1 V);
# Oops - gives "this place" for "lle yma"
# we need the REMOVE yma rule to handle this, and it needs to come before this rule
# or we get "this place there are"
# with both in this order, we get "and place there are here"


# choose the interrogative "a" instead of the conjunctive "a" if oes follows
# this could probably be broadened out
# a oes lle yma? (is there room (a place) here?) - *and there are where here
REMOVE ("a" cnjcoo) IF (1 Oes);
# Oops - gives "did this place there are"
# With above "lle yma" rules, we now get "did place there are here"
# not ideal, but slightly better than original "and there are where here"
# where is "did" coming from? "did" is never used with "be" in English!!
# and where is the plural coming from?
# "place there is here" would be acceptable


# this chooses the be able sense of cyfeiriad (not address) if preceded by yn
SUBSTITUTE ("gallu"ri vbmod) ("gallu" vbmod S1) NC (-1 prep_yn);

# this chooses the direction sense of cyfeiriad (not address) if preceded by trafod
SUBSTITUTE ("cyfeiriad"ri n m) ("cyfeiriad" n m S1) NC (-1 ("trafod"ri vblex));

# this gets rid of noun reading of trafod if it's followed by cyfeiriad
# we could probably change this to NC, because it's of wider application
REMOVE ("trafod"ri n m) IF (1 ("cyfeiriad"ri n m S1));




# choose a 2p.pl pronoun if it is preceded by a 2p.pl verb
# rydych chi yn mynd
SELECT PrnSubjP2Pl IF (0 NC) (0 PrnSubj) (-1 VbP2Pl);

# delete a verb from a {verb, noun} cohort if preceded by "preposition + the"
# yn y golchi
REMOVE V IF (0 V) (0 NC) (NOT 0 Acr) (-1 DetDef) (-2 Pr);

# delete a subject pronoun if preceded by an adjective and followed by a proper noun
# ??
REMOVE PrnSubj IF (1 NP) (-1 Adj);

# mewn i un system
REMOVE PrnSubj IF (1 Num) (-1 Pr);


# Remove a pronoun reading if it doesn't concord with the verb
# Better would be: 
#  REMOVE (Pron) IF (-1 V $$PERNUM)(NOT 0 $$PERNUM);
#  when $$PERNUM = (p1 sg) | (p2 sg) | ...

REMOVE PrnSubj IF (-1 V) ((-1 (p2) OR (p3))) (0 (p1)); 
REMOVE PrnSubj IF (-1 V) ((-1 (p1) OR (p3))) (0 (p2)); 
REMOVE PrnSubj IF (-1 V) ((-1 (p1) OR (p2))) (0 (p3));
REMOVE PrnSubj IF (-1 V) (-1 (pl)) (0 (sg));
REMOVE PrnSubj IF (-1 V) (-1 (sg)) (0 (pl));

# mark a possessive determiner as being masculine if followed by soft mutation
SUBSTITUTE (mf) (m) DetPos (1 MSoftC) (NOT 0 ("<o'i>"));

# and feminine if followed by aspirate mutation.
SUBSTITUTE (mf) (f) DetPos (1 MAspC);


# faint o + noun.sing --> how much + noun
# faint o + noun.plural --> how many + noun
#
SUBSTITUTE (sp) (sg) DetItg (1* (n sg) BARRIER (sent))
SUBSTITUTE (sp) (pl) DetItg (1* (n pl) BARRIER (sent))
SUBSTITUTE (sp) (sp) DetItg (1* (n sp) BARRIER (sent))

# ymwelwyr o tramor 
# un o hen
# ôl i 1880
REMOVE PrnSubj IF (0 Pr) 
		  (0 PrnSubj) 
		  (NOT -1 V)
		  ((1 NC) OR (1 NP) OR (1 Adj) OR (1 Num));

#Ac maen nhw wedi
REMOVE NC IF (0 (vbser)) (1 PrnSubj);


REMOVE V IF (-1 DetDef);

# See 1.3.36 -- we currently just drop subjunctives and imperatives
REMOVE VblexPrs IF (0 V); 
REMOVE Imp IF (0 (vbser)); 
REMOVE Imp IF (0 (vblex past)); 

# pobl y de
REMOVE MSoftC IF (-1 DetDef);

# Mae'r modd y mae gweithwyr mudol
# nad oedd modd
# Dim modd ei
REMOVE MNasC IF ((-1 DetDef) OR (-1 V) OR (-1 (n m)));

#aeth fo
SELECT PrnSubj IF (0 PrnSubj) (0 (vbser prs)) (-1 (vblex past));

#cyfarfod nos
REMOVE MNasC IF (0 (n f)) (-1 (n m));

#o ryw fath
REMOVE MSoftC IF (0 (n m)) (-1 NC);

#Bryd hynny
REMOVE MSoftC IF (1 Prn);

#Edwina Hart
SELECT (np ant) IF (1 (np cog));

#Ieuan Wyn Jones AC
SELECT (n acr) IF (-1 (np cog));

#Sioned Haf o Gymdeithas yr Iaith
REMOVE PrnSubj IF (-1 (np)) (0 Pr) (0 PrnSubj) (1 (np));

#ym Medi 1999
REMOVE (vblex) IF (-1 Pr) (0 NC) (NOT 0 Acr) (0 V);

#54 acer o barcio 
SELECT Pr IF (-1 NC) (1 V);

#yn sicr o gynyddu
REMOVE PrnSubj IF (-1 Adj) (1 V);

#gwerthir llyfrau yma
REMOVE DetDem IF (NOT -2* DetDef BARRIER V) ;

#y llyfr yma
REMOVE Adv IF (-1 NC) (0 Adv) (0 DetDem);
REMOVE Prn IF (-1 NC) (0 Prn) (0 DetDem);

# sut + verb --> how + verb, sut + noun --> what sort of + noun
SELECT DetItg IF (1* NC BARRIER V);
SELECT Adv IF (1* V BARRIER NC);

# After "sawl", the Welsh noun will always be singular, but the English one plural.
SUBSTITUTE (sg) (pl) NC (-1 ("sawl" det itg));

#Rhai gwynion, rhai gwinau,
REMOVE MSoftC IF (-1 Adj);

#well o lawer na'r
SELECT ("na" cnjsub) IF (-1* (adj comp) BARRIER Det);

#i ein rhai ein hunain
REMOVE PrnSubj IF (NOT -1 V);

#ysgolion o'r fath -- no idea why this doesn't work with MSoftC list
REMOVE ("<f.*>"ri "b.*"ri) IF (0 (n m sg)) (-1 DetDef);  

# not needed, because "trwy gyfrwng y Gymraeg" is now entered as a multiword
#gyfrwng y Gymraeg
#REMOVE Adj IF (-1 DetDef);

#
#  Lexical rules
#

SECTION

# distinguish between "lonely" and "only"
ADD (pred) ("unig" adj) ((1 (n)) OR (1 (np)) OR (1 (pr)) OR (1 Det) OR (1 (cm)));

# distinguish between "work" and "time"
REMOVE (n f) (0 ("gwaith")) (0 MSoftC);


