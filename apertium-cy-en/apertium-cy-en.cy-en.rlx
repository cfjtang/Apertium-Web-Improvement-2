#
# Note: This is currently not a real "Constraint Grammar", but more 
#       of a tool to hack around the badly trained HMM POS tagger.
#

DELIMITERS = "<.>" "<!>" "<?>"; # end-of-sentence markers

# give Apertium tags a mnemonic to be used in the rules

LIST NC = n; 				# common nouns
LIST NP = (np top) (np ant) (np cog); 	# proper nouns (toponyms, anthroponyms, cognomens)
LIST Acr = (n acr);
LIST V = vaux vblex vbser vbmod;		 	# lexical verbs and "to be"
LIST Vpart = (vpart neg) (vpart aff) (vpart itg); # Verbal particles
LIST Adv = adv; 			# adverb
LIST Num = num;				# numeral
LIST CC = cnjcoo; 			# co-ordinate conjunction
LIST CS = cnjsub;			# subordinate conjunction
LIST Interj = ij;			# interjection
LIST Pr = pr;				# preposition
LIST PrnSubj = (prn subj);		# subject pronoun
LIST Prn = (prn tn) (prn subj);		# pronoun

LIST P1Pl = (p1 pl);
LIST P2Pl = (p2 pl);			# second person plural
LIST P3Sg = (p3 sg);

LIST Det    = (det);
LIST DetDef = (det def);		# definite determiner (article)
LIST DetPos = (det pos);		# possessive determiner
LIST DetDem = (det dem);		# demonstrative determiner
LIST DetItg = (det itg);		# interrogative determiner
LIST DetQnt = (det qnt);		# quantifying determiner

LIST Adj = (adj sint) (adj); 		# all adjectives (synthetic + non-synthetic)

LIST MF = mf;				# masculine/feminine
LIST M = m;				# masculine
LIST F = f;				# feminine

LIST Def = def; 			# definite

LIST VblexInf = (vblex inf); 		# verb in the infinitive
LIST VblexPrs = (vblex prs); 		# verb in the present subjunctive
LIST Imp = imp;

LIST Prep_i = ("i" pr);			# the preposition "i" (to)

# mutation for individual letters
# surface form regex, base form regex
LIST MSoftC = ("<g.*>"ri "c.*"ri)  ("<d.*>"ri "t.*"ri) ("<f.*>"ri "b.*"ri) 
              ("<w.*>"ri "gw.*"ri) ("<b.*>"ri "p.*"ri) ("<dd.*>"ri "d.*"ri)
	      ("<f.*>"ri "m.*"ri);

LIST MAspC = ("<ch.*>"ri "c.*"ri) ("<th.*>"ri "t.*"ri);
LIST MNasC = ("<n.*>"ri "d.*"ri) ("<m.*>"ri "b.*"ri);

SET PrnSubjP3Sg = PrnSubj | P3Sg;
SET PrnSubjP1Pl = PrnSubj | P1Pl;
SET PrnSubjP2Pl = PrnSubj | P2Pl;
SET VbP2Pl = V | P2Pl;
SET Conj = CC | CS;

#SET DetPosNE = DetPos - (+ei);

SECTION

#dawnsio yn y cae
SELECT NC IF (-1 DetDef) (0 NC) (0 V);

# choose verbal partical if sandwiched between Conj + verb
SELECT Vpart IF ((-1 CC) OR (-1 CS) OR (NOT -1 (vblex))) 
		((1 (vblex)) OR (1 (vbser)) OR (1 (vbmod)) OR (1 (vaux))) 
		(NOT 1 (vblex inf)) (NOT 1 (n)) (NOT 1 Num) (NOT 0 CC);

SELECT Vpart IF ((-1 (cm)) OR (NOT -1 (vblex))) ((1 (vblex)) OR (1 (vbser))) (NOT 1 (vblex inf)) (NOT 1 Num) (NOT 0 CC);
SELECT (vbser cns) IF (-1 Vpart);

#This is horrible:
#nid oes llawer o'r rheiny ar ôl
SELECT (vbser) IF (0 NC) (0 (vbser)) (1 DetQnt) (2 DetDef);

# choose the preposition "i" if it is followed by an infinitive
# aeth i gael y pres
SELECT Prep_i IF (1 VblexInf);

#Rydan ni wedi sefydlu meini prawf newydd, ystyried y ffordd ymlaen. 
SELECT PrnSubjP1Pl IF (-1 P1Pl) (-1 V);

# delete a subject pronoun if preceded by an infinitive
# i'w weld fo
# NOT: mynd â chi ar
REMOVE PrnSubj IF (-1 VblexInf) (NOT 0 MAspC);

#mynd â chi ar
REMOVE MAspC IF (-1 (vblex)) (0 MAspC) (0 PrnSubj);
REMOVE MAspC IF (-1 (n)) (0 MAspC) (0 PrnSubj);

# delete a noun from a {noun, pronoun} cohort if preceded by an infinitive and followed by a preposition
# i'w weld fo yn y dref
REMOVE NC IF (-1 V) (0 NC) (0 PrnSubj) (1 Pr);

# choose a 2p.pl pronoun if it is preceded by a 2p.pl verb
# rydych chi yn mynd
SELECT PrnSubjP2Pl IF (0 NC) (0 PrnSubj) (-1 VbP2Pl);

# delete a verb from a {verb, noun} cohort if preceded by "preposition + the"
# yn y golchi
REMOVE V IF (0 V) (0 NC) (NOT 0 Acr) (-1 DetDef) (-2 Pr);

# delete a subject pronoun if preceded by an adjective and followed by a proper noun
# ??
REMOVE PrnSubj IF (1 NP) (-1 Adj);

# mewn i un system
REMOVE PrnSubj IF (1 Num) (-1 Pr);


# Remove a pronoun reading if it doesn't concord with the verb
# Better would be: 
#  REMOVE (Pron) IF (-1 V $$PERNUM)(NOT 0 $$PERNUM);
#  when $$PERNUM = (p1 sg) | (p2 sg) | ...

REMOVE PrnSubj IF (-1 V) ((-1 (p2) OR (p3))) (0 (p1)); 
REMOVE PrnSubj IF (-1 V) ((-1 (p1) OR (p3))) (0 (p2)); 
REMOVE PrnSubj IF (-1 V) ((-1 (p1) OR (p2))) (0 (p3));
REMOVE PrnSubj IF (-1 V) (-1 (pl)) (0 (sg));
REMOVE PrnSubj IF (-1 V) (-1 (sg)) (0 (pl));

# mark a possessive determiner as being masculine if followed by soft mutation
SUBSTITUTE (mf) (m) DetPos (1 MSoftC) (NOT 0 ("<o'i>"));

# and feminine if followed by aspirate mutation.
SUBSTITUTE (mf) (f) DetPos (1 MAspC);


# faint o + noun.sing --> how much + noun
# faint o + noun.plural --> how many + noun
#
SUBSTITUTE (sp) (sg) DetItg (1* (n sg) BARRIER (sent))
SUBSTITUTE (sp) (pl) DetItg (1* (n pl) BARRIER (sent))
SUBSTITUTE (sp) (sp) DetItg (1* (n sp) BARRIER (sent))

# ymwelwyr o tramor 
# un o hen
# ôl i 1880
REMOVE PrnSubj IF (0 Pr) 
		  (0 PrnSubj) 
		  (NOT -1 V)
		  ((1 NC) OR (1 NP) OR (1 Adj) OR (1 Num));

#Ac maen nhw wedi
REMOVE NC IF (0 (vbser)) (1 PrnSubj);


REMOVE V IF (-1 DetDef);

# See 1.3.36 -- we currently just drop subjunctives and imperatives
REMOVE VblexPrs IF (0 V); 
REMOVE Imp IF (0 (vbser)); 
REMOVE Imp IF (0 (vblex past)); 

# pobl y de
REMOVE MSoftC IF (-1 DetDef);

# Mae'r modd y mae gweithwyr mudol
# nad oedd modd
# Dim modd ei
REMOVE MNasC IF ((-1 DetDef) OR (-1 V) OR (-1 (n m)));

#aeth fo
SELECT PrnSubj IF (0 PrnSubj) (0 (vbser prs)) (-1 (vblex past));

#cyfarfod nos
REMOVE MNasC IF (0 (n f)) (-1 (n m));

#o ryw fath
REMOVE MSoftC IF (0 (n m)) (-1 NC);

#Bryd hynny
REMOVE MSoftC IF (1 Prn);

#Edwina Hart
SELECT (np ant) IF (1 (np cog));

#Ieuan Wyn Jones AC
SELECT (n acr) IF (-1 (np cog));

#Sioned Haf o Gymdeithas yr Iaith
REMOVE PrnSubj IF (-1 (np)) (0 Pr) (0 PrnSubj) (1 (np));

#ym Medi 1999
REMOVE (vblex) IF (-1 Pr) (0 NC) (NOT 0 Acr) (0 V);

#54 acer o barcio 
SELECT Pr IF (-1 NC) (1 V);

#yn sicr o gynyddu
REMOVE PrnSubj IF (-1 Adj) (1 V);

#gwerthir llyfrau yma
REMOVE DetDem IF (NOT -2* DetDef BARRIER V) ;

#y llyfr yma
REMOVE Adv IF (-1 NC) (0 Adv) (0 DetDem);
REMOVE Prn IF (-1 NC) (0 Prn) (0 DetDem);

# sut + verb --> how + verb, sut + noun --> what sort of + noun
SELECT DetItg IF (1* NC BARRIER V);
SELECT Adv IF (1* V BARRIER NC);

# After "sawl", the Welsh noun will always be singular, but the English one plural.
SUBSTITUTE (sg) (pl) NC (-1 ("sawl" det itg));

#Rhai gwynion, rhai gwinau,
REMOVE MSoftC IF (-1 Adj);

#well o lawer na'r
SELECT ("na" cnjsub) IF (-1* (adj comp) BARRIER Det);

#i ein rhai ein hunain
REMOVE PrnSubj IF (NOT -1 V);

#
#  Lexical rules
#

SECTION

# distinguish between "lonely" and "only"
ADD (pred) ("unig" adj) ((1 (n)) OR (1 (np)) OR (1 (pr)) OR (1 Det) OR (1 (cm)));

# distinguish between "work" and "time"
REMOVE (n f) (0 ("gwaith")) (0 MSoftC);

