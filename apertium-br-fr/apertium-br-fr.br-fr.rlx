DELIMITERS            = (sent) (".");

LIST BOS              = (>>>);
LIST EOS              = (<<<);

# Nouns
LIST NC               = (n);
LIST NomF             = (n f);
LIST NomM             = (n m);
LIST NP               = (np top) (np ant) (np cog) (np al);
LIST Toponim          = (np top);
LIST Acr              = (n acr);

SET  N                = NC + NP;

# Numerals
LIST Num              = (num);

# Determiners         
LIST Det              = (det);
LIST PreDet	      = (predet);

# Demonstratives
LIST Dem              = (prn dem) (det dem);

# Adjectives
LIST Adj              = (adj);

LIST Itg              = (itg);

# Pronouns
LIST PrnSubj          = (prn subj);
LIST PrnDObj          = ("direct"ri prn obj);
LIST PrnIObj          = ("indirect"ri prn obj) (+indirect);  # Lemmas from sub-readings are expressed as tags and prefixed with '+'
LIST PrnInd	      = (prn ind);

SET Prn               = PrnSubj + PrnDObj + PrnIObj;

# Determiners
LIST DetDef           = (det def);
LIST DetInd           = (det ind);
LIST DetPos           = (det pos);

# Prepositions
LIST Prep             = (pr);


# Verbal particles 
LIST Vpart            = (vpart);
LIST VpartSDO         = ("a"ri vpart);
LIST VpartIDO         = ("e"ri vpart);
LIST VpartNeg         = (vpart neg);
LIST VpartGer         = (vpart ger);
LIST VpartNegImp      = ("na"ri vpart neg);
LIST VpartRef         = (vpart ref); # en em
LIST VpartPPres       = ("en ur"ri vpart ppres);

# Verbs
LIST Vbloc            = (vbloc);
LIST Vblex            = (vblex);
LIST Vbser            = (vbser);

LIST VerbPP           = (vblex pp);
LIST VerbImp          = (vblex imp);
LIST VerbInf          = (vblex inf);
LIST VerbImpers       = (vblex impers);

LIST TempsFin         = (pri) (pii) (past) (fti);

SET Verb              = Vbloc | Vblex | Vbser;
SET VerbFin           = Verb | TempsFin;

# Adverbs
LIST Adv              = (adv);
LIST Ket 	      = ("ket" adv);

# Conjunctions

LIST CC               = (cnjcoo);
LIST CS               = (cnjsub);

# Mutations
LIST SoftMut          = ("<g.*>"ri "k.*"ri) ("<d.*>"ri "t.*"ri) ("<b.*>"ri "p.*"ri) ("<c’h.*>"ri "g.*"ri) ("<c'h.*>"ri "g.*"ri)
                        ("<w.*>"ri "gw.*"ri) ("<z.*>"ri "d.*"ri) ("<v.*>"ri "b.*"ri) ("<v.*>"ri "m.*"ri);

LIST AspMut           = ("<c’h.*>"ri "k.*"ri) ("<c'h.*>"ri "k.*"ri) ("<z.*>"ri "t.*"ri) ("<f.*>"ri "p.*"ri); 
LIST HardMut          = ("<k.*>"ri "g.*"ri) ("<t.*>"ri "d.*"ri) ("<p.*>"ri "b.*"ri); 
LIST MixedMut         = ("<c’h.*>"ri "g.*"ri) ("<c'h.*>"ri "g.*"ri) ("<w.*>"ri "gw.*"ri) ("<t.*>"ri "d.*"ri) ("<v.*>"ri "b.*"ri) ("<v.*>"ri "m.*"ri); 

LIST HardMutTrigger   = ("ho"ri det pos) ("e"ri +da det pos);
LIST AspMutTrigger    = ("o"ri det pos) ("va"ri det pos) ("he"ri det pos) ("peder"ri num f) ("pevar"ri num m) ("teir"ri num f) 
                        ("tri"ri num m) ("nav"ri num) ;

                        # Missing: "tra" (while), "seul" (all the more), "re" (those, ones)
			# "en em" reflexive particle, "en ur" while, 

LIST SoftMutTrigger   = ("a"ri vpart) ("a"ri pr) ("aba"ri adv) ("da"ri pr) ("ez"ri vpart) ("hanter"ri adj) ("holl"ri adj)
                        ("da"ri det pos) ("daou"ri num m) ("div"ri num f) ("dindan"ri adv) ("diwar"ri pr) ("dre"ri pr)
                        ("e"ri det pos m) ("na"ri vpart neg) ("ne"ri vpart neg) ("pa"ri cnjsub) ("pe"ri cnjcoo) 
                        ("pe"ri adv itg) ("ra"ri vpart opt) ("re"ri adj) ("war"ri pr) ("re"ri adv) ("an"ri det def) ("un"ri det ind)
			("meur a"ri det ind);

LIST MixedMutTrigger  = ("e"ri vpart);

# Orthography
LIST DroppedG         = ("<[aeiou].*>"r "g[aeiou].*"ri);

# Sets

SET PRE-N =  Adj | Det | Dem | NC | Num ; 

SET WORD = NC | Verb | Adj | Prep | Prn | Adv | CC | CS | Num | ("\?") ;
SET MARK =  ("\,") | ("\:") | ("\;") ;
SET WORDMARK = WORD | MARK ;

SET NPNH = WORDMARK - PRE-N ;
SET NPNHA = WORDMARK - PRE-N - Adv ;
SET NOT-ADV = WORDMARK - Adv ;
SET NOT-ADJ = WORDMARK - Adj ;

SET S-BOUNDARY = CS | (sent) | VpartIDO;

#
# Main section
#

SECTION


# implijout ar brezhoneg war ar panelloù kelaouiñ elektronek, prenañ ingal levrioù e brezhoneg evit ar vediaoueg, aozañ abadennoù e brezhoneg, stankaat ar c’hentelioù tañva brezhoneg er skolioù, komz brezhoneg e-pad al lidoù ofisiel.
REMOVE ("komz" n) IF (1 NC);

# REGLA (B    ): "Ur bed nevez."
REMOVE Verb IF (-1 DetInd);

# REGLA (B    ): "Ne garan ket ac’hanout"
REMOVE NC IF (-1 ("ne"ri adv)) (1 ("ket"ri adv));

# REGLA (B    ): "Al labour a vo kinniget deoc’h."
SELECT NC IF (-1 ("<al>"ri det def));

# REGLA (B0024): "WAR BONT AR NAONED"
REMOVE Acr IF (0 NC) (0 Acr);

# REGLA (B0022): "ha zo bet skrivet"
REMOVE SoftMut IF (NOT -1 SoftMutTrigger);

# REGLA (B0023):  "te a had"
SELECT PrnSubj IF (1 VpartSDO) (2 VerbFin);

# REGLA (B0001): "me a had"
SELECT VpartSDO IF ((-1 PrnSubj) OR (-1 PrnDObj));

# REGLA (B0002): "eviti e laboure"
SELECT VpartIDO IF ((-1 PrnIObj) OR (-1 Adv));

# REGLA (B0003): "na ganit ket"
SELECT VpartNegImp IF (1 VerbImp);

SELECT VerbFin IF (-1 VpartNeg);

# Rankout a ran en em ginnig
SELECT VerbFin IF (-1 VpartRef);

# REGLA (B0004): "a had"
#SELECT Verb IF (-1 Vpart);

# REGLA (     ): "Kerzhet hon eus e-pad 2 eurvezh"
REMOVE VerbInf IF (1 ("endevout" vblex));

# REGLA (     ): "a ra"
REMOVE Prep IF (0 Prep) (0 Verb) (1 Vpart) (1 VerbFin) (NOT 1 PRE-N);

REMOVE Vpart IF (0 Vpart) (0 VerbFin) (-1 VerbFin) (-1 Vpart) (NOT -1 PRE-N);

# REGLA (B0022): "ne ... ket"
SELECT Verb IF (-1 VpartNeg) (1 Ket);

# "Evit ar poent e c’heller ober gant e ijinadenn"
SELECT VerbInf IF (-1 ("gellout" vblex) OR ("ober" vblex));

# REGLA (B0005): "na ganit ket"
SELECT VerbImp IF (-1 VpartNegImp);

# REGLA (B0006): "emañ e Brest"
SELECT Prep IF (-1 Vbloc);

# REGLA (B0008): "edo o vervel"
SELECT VpartGer IF (1 VerbInf);

# REGLA (B0015): "o chom e Roazhon"
SELECT VerbInf IF (-1 VpartGer);

# REGLA (B0009): "Geriadur digor ha frank"
SELECT Adj IF (-1 NC) (0 NC) (0 Adj);

# REGLA (B    ): "Katell a zeuio da gomz" 
# 
#   We need a list of verbs which come with their own verbal particles
#
REMOVE NC IF ((-3 Vpart) OR (-2 ("mont a ober"ri))) (-2 VerbFin) (-1 ("da" pr)) (0 VerbInf) (0 NC);

# REGLA (B    ): "met dav eo dezho goulenn un aotre evit gallout ober kement-mañ gant ar re OGK"
SELECT Verb IF (-3 ("dav"ri adj)) (-2 ("<eo>"ri vblex)) (-1 PrnIObj);
SELECT Verb IF (-2 ("dav"ri adj)) (-1 ("<eo>"ri vblex));

# REGLA (B    ): "Ne c’hallan ket ober an dra-se"
SELECT VerbInf IF (-1 ("ket" adv)) (-2 VerbFin);

# REGLA (B0010): "Ar stad zo unan eus stummoù aozadur politikel ur vro."
REMOVE VerbFin IF (*-1 VerbFin BARRIER S-BOUNDARY)

#Mont a ran da ginnig anezhi dezhe
SELECT Prep IF (-1 ("mont a ober"ri)) (1 VerbInf);

# REGLA (B    ): ", en he fenn Yannick Jadot rener kozh Greenpeace Bro-C'hall"
REMOVE PrnDObj IF (-1 ("<en>"ri pr));

# REGLA (B    ): "Bez' e rankan mont bremañ."
REMOVE PrnDObj IF (-1 VerbInf) (1 VerbFin);

# REGLA (B    ): "ar Skrivadeg a vo dalc'het e Skol-Veur La Harpe"
REMOVE PrnDObj IF (-1 Verb) (1 NC);

# REGLA (B    ): "o chom e oamp en un tiig koant "
REMOVE PrnDObj IF (-2 VpartGer) (-1 Verb) (1 Verb);

# REGLA (B    ): "Dalc'het e vo er sal Sten Kidna" 
REMOVE PrnDObj IF (-1 VerbPP) (0 VpartIDO) (1 ("bezañ"ri vblex));

# REGLA (B    ): "D'ar mare ma oan o tigeriñ an nor"
REMOVE DetPos IF (1 VerbFin);

# Roet em eus anezhi dezhañ. An hanter anezhi .
# Ne welin ket ac'hanoc'h
SELECT PrnDObj IF ((-1 Verb) OR (-1 ("ket" adv))) ;

# REGLA (B0011): "Stad da lod"
REMOVE PrnDObj IF (NOT -1 VerbFin) (NOT 1 VerbFin);

# REGLA (B    ): "diorroet eo o rouedadoù war an dachenn"
REMOVE PrnDObj IF (1 NC) (NOT 1 VerbFin);

# REGLA (B    ): "d'ur skoazell digant an holl Vretoned"
REMOVE PrnInd IF (-1 Det) (1 NC);
SELECT PreDet IF (-1 Det) (1 NC);

# REGLA (B0012): "An dud a zeu da Roazhon"
REMOVE VerbFin IF (0 Det) (1 NC)

# REGLA (B0013): "Me am eus kanet"
REMOVE VerbImp IF (-1 VerbFin);

# REGLA (B0014): "Yann a zeuy"
SELECT Vpart IF (1 VerbFin);

# REGLA (B0016): >The particle is omitted before every form of 'endevout' and the locative forms of 'bezañ'
REMOVE Vpart IF (1 ("endevout" vblex));
REMOVE Vpart IF (1 Vbloc);

# REGLA (B0017): >The particle is omitted before verbal nouns and imperatives
REMOVE Vpart IF ((1 VerbInf) OR (1 VerbImp));

# REGLA (B0019): "o chom e Roazhon"
REMOVE PrnDObj IF (-1 VerbInf);

# REGLA (B0020): "Ni a ro al laezh"
SELECT VerbFin IF (-1 VpartSDO) (-2 PrnSubj)

# REGLA (B    ): "Ne implij ket"
REMOVE VerbInf IF (-1 ("ne"ri)) (1 ("ket"ri));

# REGLA (B0021): >The particle is omitted before verbal nouns and imperatives
REMOVE VerbInf IF (-1 Vpart) (0 VerbFin);
REMOVE VerbImp IF (-1 Vpart) (0 VerbFin);

REMOVE Itg IF (1 VerbPP);

SELECT CS IF (1 VerbFin) (NOT 1 NC) (0 DetPos);

# REGLA (B    ): "Bep sizhun e vez tro da lenn brezhoneg war Bremaik"
SELECT N IF (-1 Prep) (0 N) (0 Adv);

# REGLA (B    ): "Meur a viz"
SELECT N IF (-1 Det) (0 N) (0 Verb);

# REGLA (B    ): "kuit da gomz e galleg"
SELECT Verb IF (-1 ("kuit da"));

# REGLA (B    ): "emgav gant rener ar radio"
REMOVE Verb IF (-1 ("gant" pr));

# REGLA (B    ): "En 2 yezh war"
REMOVE Adj IF (-1 Num) (0 Adj) (0 NC) (1 Prep);

# REGLA (B    ): "e c’heller ober gant e ijinadenn"
REMOVE Prep IF (-1 Prep) (NOT -1 PRE-N) (0 Prep) (0 DetPos);

# REGLA (B    ): "15 studier" 
REMOVE VerbImpers IF (NOT -1 Vpart) ((-1 Num) OR (-1 NC) OR (-1 Det)) (0 VerbImpers) (0 NC);

# REGLA (B    ): "Bet hon eus kalz a draoù" / "Bet bezañ"
SELECT ("endevout"ri pp) IF (0 ("endevout"ri pp)) (0 ("bezañ"ri pp)) (1 ("endevout" vblex));
SELECT ("endevout"ri pp) IF (0 ("endevout"ri pp)) (0 ("bezañ"ri pp)) (-1 ("endevout" vblex));
SELECT ("bezañ"ri pp) IF (0 ("endevout"ri pp)) (0 ("bezañ"ri pp)) (1 ("bezañ" vblex));
SELECT ("bezañ"ri pp) IF (0 ("endevout"ri pp)) (0 ("bezañ"ri pp)) (-1 ("bezañ" vblex));

SELECT ("endevout"ri pp) IF (0 ("endevout"ri pp)) (0 ("bezañ"ri pp)) (2 ("endevout" vblex));
SELECT ("endevout"ri pp) IF (0 ("endevout"ri pp)) (0 ("bezañ"ri pp)) (-2 ("endevout" vblex));
SELECT ("bezañ"ri pp) IF (0 ("endevout"ri pp)) (0 ("bezañ"ri pp)) (2 ("bezañ" vblex));
SELECT ("bezañ"ri pp) IF (0 ("endevout"ri pp)) (0 ("bezañ"ri pp)) (-2 ("bezañ" vblex));



# REGLA (B    ): "Skuizh e vi"
SELECT SoftMut IF ((-1 ("e" vpart obj) OR (-1 ("e" det pos))) (NOT -1 Prep) (NOT -1 PrnDObj);

# REGLA (B    ): "D'an emgann ez an"
REMOVE (+da) IF (1 DetDef);

# REGLA (B    ): "Gwelet em eus ar c’hi en ur dreuziñ an hent"
SELECT VerbInf (-1 VpartPPres);

SELECT VerbPP IF (1 ("bezañ"ri vblex)) (1 VerbFin);


# REGLA (B    ): "N'ez an ket da c'hoari "
SELECT VerbFin IF (-1 Vpart) (-2 ("ne"ri adv));


# REGLA (B    ): "en he fenn "
REMOVE VerbFin IF (-1 DetPos);

SECTION

# REGLA (A0002): "hi a oar"
SELECT DroppedG IF (-1 Vpart);

# REGLA (A0003): "na ganit ket"
SELECT SoftMut IF (-1 SoftMutTrigger);

# REGLA (A0004): "emañ e Brest"
REMOVE SoftMut IF (NOT -1 SoftMutTrigger);

# REGLA (A0006): ""
SELECT SoftMutTrigger IF (1 SoftMut);

# REGLA (A0005): "ez di"
SELECT HardMut IF (-1 HardMutTrigger);

# REGLA (A0006): "ez di"
SELECT HardMutTrigger IF (1 HardMut);

# REGLA (A0007): "o deus kanet"
REMOVE HardMut IF (NOT -1 HardMutTrigger);

# REGLA (A0008): "nemet peder flanedenn"
SELECT AspMut IF (-1 AspMutTrigger);

# REGLA (A0009): "nemet peder flanedenn"
SELECT AspMutTrigger IF (1 AspMut);

# REGLA (A0009): ""
REMOVE AspMut IF (NOT -1 AspMutTrigger);

# REGLA (A0008): ""
SELECT MixedMut IF (-1 MixedMutTrigger);

# REGLA (A0009): ""
SELECT MixedMutTrigger IF (1 MixedMut);

# REGLA (A0009): ""
REMOVE MixedMut IF (NOT -1 MixedMutTrigger);

# REGLA (A0010): "un taol, un daol"
REMOVE NomF IF (-1 SoftMutTrigger) (NOT 0 SoftMut) (0 NomF) (0 NomM);

SECTION

# REGLA (C0003): "al Louarn"
REMOVE NP IF (0 NP) (0 NC) (-1 DetDef);

# REGLA (C0001): "o chom e Roazhon"
REMOVE DetPos IF (1 Toponim);

# REGLA (C0002): "zeu da Gwengamp"
REMOVE PrnDObj IF (1 Toponim);

REMOVE (obj) IF (-1 BOS);

# Remove imperatives for now
REMOVE VerbImp IF (0 VerbImp);

# Select 'ober' after determiner
SELECT ("ober" n) IF ((-1 DetDef) OR (-1 Num));

# bep pemp munut
REMOVE Adj IF (0 Adj) (0 NC) (-1 Num);

# meur a viz
REMOVE ("biz"ri n) IF (0 ("biz"ri n)) (0 ("miz"ri n)) (-1 ("meur a"ri det ind));

# en he fenn
REMOVE (+an) IF (1 DetPos) (0 ("<en>"ri));

# select proper names if they are in caps
SELECT NP IF (0 ("Gwalarn" np));
SELECT NP IF (0 ("Diwan" np));
SELECT NP IF (0 ("Emsav" np));
SELECT NP IF (0 ("Emgann" np));
SELECT NP IF (0 ("Dihun" np));
SELECT NP IF (0 ("Dastum" np));
SELECT NP IF (0 ("Goursez" np));
