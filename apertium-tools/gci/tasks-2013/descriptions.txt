ID	Title	Description
1	Categorise words by part-of-speech	The objective of this task is to take a frequency list of words for AAA and categorise them by their part-of-speech. Further information can be found on the following page: http://wiki.apertium.org/wiki/Task_ideas_for_Google_Code-in/Categorise_words_from_frequency_list . You will need to have some knowledge of the language whose words you intend to categorise
2	Lemmatise words by frequency	The objective of this task is to take a frequency list of words for AAA which have been categorised and then lemmatise them. This means finding the "base" or "dictionary" form of the word. Further information can be found on the following page: http://wiki.apertium.org/wiki/Task_ideas_for_Google_Code-in/Lemmatise_words_from_frequency_list . You will need to have some knowledge of the language whose words you intend to lemmatise.
3	Intersection of ATT format transducers 	The objective of these tasks is to write code to intersect two finite-state transducers. The first transducer is a bilingual dictionary that has been converted into prefixes and the second transducer is the monolingual dictionary. You can find out more about the task on this web page: http://wiki.apertium.org/wiki/Task_ideas_for_Google_Code-in/Intersection_of_ATT_format_transducers
4	Categorise words by inflectional paradigm	The objective of this task is to find the inflectional paradigm for a series of words in AAA. This can be done manually, or semi-automatically. The following page has further details: http://wiki.apertium.org/wiki/Task_ideas_for_Google_Code-in/Add_words_from_frequency_list
5	Extract (scrape) inflections from Wiktionary	The objective of this task is to extract (or scrape) inflectional information for AAA from Wiktionary. This will involve either processing wiki code or HTML code. Further information can  be found at the following link: http://wiki.apertium.org/wiki/Task_ideas_for_Google_Code-in/Scrape_inflection_information_from_Wiktionary
6	Language detection in apertium-apy	The objective of this task is to add a function to do language detection to apertium-apy, a python based web services API for Apertium. Further information at the following URL: http://wiki.apertium.org/wiki/Task_ideas_for_Google_Code-in/Language_detection_in_simple-html_and_apertium-apy
7	Localised 'available languages' in apertium-apy	The objective of this task is to make a new function to return a list of available languages in translation in apertium-apy, a python-based web-services API for Apertium. Further information can be found at the following URL: http://wiki.apertium.org/wiki/Task_ideas_for_Google_Code-in/Language_detection_in_simple-html_and_apertium-apy
8	Hand-annotate 500 words of text	The objective of this task is to manually morphologically disambiguate running words of text in AAA. More information can be found on the Wiki here: http://wiki.apertium.org/wiki/Task_ideas_for_Google_Code-in/Morphologically_disambiguating_text
9	Abstract formatting for the simple-html interface	
10	Interface behaviour for language guessing	The objective of this task is to improve the behaviour of the interface for selecting languages in the simple-html interface for Apertium. It will involve using JavaScript and CSS to choose the most probable language and to highlight other probable languages. Further information can be found here: http://wiki.apertium.org/wiki/Task_ideas_for_Google_Code-in/Language_detection_in_simple-html_and_apertium-apy
11	Use external language detection in simple-html	
12	Wiktionary language-page count calculator	The objective of this task is to write a script which calculates the number of pages in a Wiktionary category for a language. The code should be modular, able to work with any given Wiktionary, and should return e.g. the number of pages in Category:Faroese_language. 
13	Bison syntax-tree visualisation	Write a program which reads a grammar using bison, parses a sentence and outputs the syntax tree as text, or graphViz or something. You can find more information here: http://wiki.apertium.org/wiki/Task_ideas_for_Google_Code-in/Syntax_tree_printing_in_bison
14	Document how to install WikiBhasha	
15	Intersection of two transducers in lttoolbox	The objective of this tasks is to write code in C++ using the lttoolbox library to intersect two finite-state transducers. The first transducer is a bilingual dictionary that has been converted into prefixes and the second transducer is the monolingual dictionary. You can find out more about the task on this web page: http://wiki.apertium.org/wiki/Task_ideas_for_Google_Code-in/Intersection_of_ATT_format_transducers
16	Front end to intersection in lttoolbox (lt-trim)	The objective of this task is to write a C++ program that provides a front end to intersect two transducers. You can find out more at: http://wiki.apertium.org/wiki/Task_ideas_for_Google_Code-in/Intersection_of_ATT_format_transducers
17	Extract translations from Wiktionary	For language pair AAA and BBB extract all the possible translations from Wiktionary. You could do this with a screenscraping or a databases/wikicode parsing methodology. 
18	Extract paradigm sketches from a dictionary	The objective of this task is to extract paradigm "sketches" for AAA of the kind found in dictionaries and sort them into the different categories. It will involve text processing and quite a bit of shell scripting or python. For more information see: http://wiki.apertium.org/wiki/Task_ideas_for_Google_Code-in/Extracting_paradigm_sketches_from_dictionaries
19	Morphologically analyse and align parallel corpus	
20	Hand-annotate 250 words of text	The objective of this task is to manually morphologically disambiguate 250 words of running words of text in AAA. More information can be found on the Wiki here: http://wiki.apertium.org/wiki/Task_ideas_for_Google_Code-in/Morphologically_disambiguating_text
21	Extract parallel corpus from web site	The objective of this task is to download web pages from a bilingual (or multilingual) web site and document align them. This means finding out which pages are translations of other pages.
22	Sentence align parallel corpus	Given a document-aligned parallel corpus, use a sentence splitter (for example NLTK Punkt) and sentence aligner (for example hunalign) to produce a sentence-aligned parallel corpus.
23	Hand-correct the spelling of 50 words	The objective of this task is to read through documents (e.g. from Wikipedia) and find and correct spelling errors in them, keeping a note of where you found the error. For further information see: http://wiki.apertium.org/wiki/Task_ideas_for_Google_Code-in/Hand-correct_spelling_errors
24	Document how to install a voikko spellchecker for LibreOffice	
25	Document how to install a voikko spellchecker for libenchant	
26	Convert paradigm tables to speling format	The objective of this task is to take a grammar for AAA and copy out (or extract) the paradigms in speling format. A description of the speling format can be found here: http://wiki.apertium.org/wiki/Speling_format. Your mentor will provide you with the grammar.
27	Check output of a word-aligner to make a bilingual dictionary	
28	Manually create a transfer lexicon from a word list in .dix format	The objective of this task is to manually create a transfer lexicon for AAA and BBB. A transfer lexicon is a file that includes words, their equivalents in another language, and tags describing some kinds of structural transfer that might need to take place. 
29	Proofread an existing dictionary	The objective of this task is to read through an existing dictionary for AAA and BBB and check that the entries are accurate and complete. If an entry is wrong, you should change it, if it is incomplete you should add the missing entries. Contact your mentor on IRC for a copy of the dictionary.
30	Extract test sentences from a grammar	The objective of this task is to read through a grammar of AAA in BBB and to extract test sentences. Test sentences are short sentences, of under 10 words which demonstrate grammatical differences. Talk to your mentor for details on how to encode the test sentences.
31	Document how to set up libreoffice-voikko in Windows	
32	Document how to use WikiBhasha	
33	Write a dictionary-based tokeniser for Asian languages	The objective of this task is to write a tokeniser for AAA. A tokeniser takes a sentence and splits it into words. One of the challenges of building a tokeniser for AAA is that spaces are not used to separate words. The tokeniser will have some generic code for reading and writing output, and will use one or more algorithms to determine how to segment the sentence. Read more about this task here: http://wiki.apertium.org/wiki/Task_ideas_for_Google_Code-in/Tokenisation_for_spaceless_orthographies
34	Evaluate tokenisation strategies for a South-Asian language	
35	Implement IBM model 1 word alignment in python	
36	Implement language detection in apertium-apy	
37	Write a review of the available literature on word segmentation 	The objective of this task is to write a review of the available search on word segmentation for AAA. This will involve searching for and reading scientific papers and also looking for available software. Further information on this task at: http://wiki.apertium.org/wiki/Task_ideas_for_Google_Code-in/Tokenisation_for_spaceless_orthographies
	*-morph and *-gener modes for apertium-apy	
	performance tracking in apertium-apy	
	apertium-apy gateway	
	apertium-apy gateway server pool management	
56	test and document init scripts for apertium-apy	
	cronjob to detect a "hang" for apertium-apy	
	make apertium-apy use one lock per pipeline	
	make voikkospell understand apertium stream format input	
	make voikkospell return output in apertium stream format	
	libvoikko support for OS X	
	geriaoueg hover functionality: firefox/iceweasel	
	geriaoueg hover functionality: chrome/chromium	
	geriaoueg language/pair selection: firefox/iceweasel	
	geriaoueg language/pair selection: chrome/chromium	
	geriaoueg lookup code: firefox/iceweasel	
	geriaoueg lookup code: chrome/chromium	
	apertium-apy translation-per-word mode	
	apertium-apy mode for geriaoueg (biltrans in context)	
	make apertium-quality work with python3.3 on all platforms	
	How much of a given sentence pair is explained by Apertium?	
	Compare Apertium with another MT system and improve it	
	Check that the Apertium guide for Windows users still works	
	Installation instructions for missing GNU/Linux distributions or versions	
	Installing Apertium in lightweight GNU/Linux distributions	
	What's difficult about this language pair?	
	Video guide to installation	
	Apertium in 5 slides	
	Improved "Become a language-pair developer" document	
	An entry test for Apertium	
	Write a contrastive grammar	
	The most frequent Romance-to-Romance transfer rules	
	Improve the quality of a language pair by allowing for alternative translations	
	Get bible aligner working (or rewrite it)	
	tesseract interface for apertium languages        	
	Abstract the formatting for the simple-html interface.	
	simple-html spell-checker interface	
	simple-html spell-checker code	
	simple-html morphological analysis/generation interface	
	simple-html morphological analysis/generation code	
	simple-html interface behaviour for language guessing	
	simple-html function for language guessing	
	Update the Apertium guide for Windows users with new language pairs	
	Light Apertium bootable ISO for small machines	
	Apertium in XLIFF workflows	
	Examples of minimum files where an Apertium language pair messes up (X)HTML formatting	
	Make sure an Apertium language pair does not mess up (X)HTML formatting	
	Examples of minimum files where an Apertium language pair messes up wordprocessor formatting	
	Make sure an Apertium language pair does not mess up wordprocessor (ODT, RTF) formatting	
	Start a language pair involving Interlingua	
	Generating 'machine translation memories'	
	scraper for all wiktionary pages in a category	
	scraper of wiktionary translations between language x and y	
	better wikipedia extractor script	
	Document materials for a language not yet on our wiki	
106	Tag and align a corpus	
	Write a program to convert the Giellatekno Faroese CG to Apertium tags	
	Categorise a Russian POS	
	Syntax tree visualisation using GNU bison	
	Document how to install WikiBhasha with MediaWiki	
	Apertium plugin for WikiBhasha	
	Make WikiBhasha take content from any language's wikipedia	
	Scraper for freely available forum content	
	Investigate how orthographic modes on kk.wikipedia.org are implemented	
	Write a transliteration plugin for mediawiki	
	Implement the intersection operator in lttoolbox	
	Intersection of ATT format transducers	
	Generalise phenny/begiak git plugin	
	phenny/begiak git plugin commit info function	
	phenny/begiak git plugin recent function	
	phenny/begiak git plugin status	
	Document phenny/begiak git plugin	
	phenny/begiak svn plugin info function	
	train tesseract on a language with no available tesseract data	
	scrape a freely available dictionary using tesseract	
	make scraper plugin for azadliq.org	
	make RFERL scraper documentation read like a HOWTO guide	
	Write an sentence aligner for the UDHR	
	Import nouns from azmorph into apertium-aze	
	Import adjectives from azmorph into apertium-aze	
	Import adverbs from azmorph into apertium-aze	
	Import verbs from azmorph into apertium-aze	
	Import misc categories from azmorph into apertium-aze	
	write a browser interface for the concordancer	
	make concordancer work with output of analyser	
	regex searching in concordancer	
	scraper for all text urls from kumukia.ru/adabiat	
	scraper for all article urls from kumukia.ru/cat-qumuq.html	
	write a scraper plugin for kumukia.ru/adabiat texts       	
	write a scraper plugin for kumukia.ru/cat-qumuq.html articles	
	apache forwarding to apertium-apy	
	fix pairviewer's 2- and 3-letter code conflation problems	
	add language searching to pairviewer	
	come up with better colours for pairviewer	
	map support for pairviewer ("pairmapper")	
	coordinates for Caucasian languages	
	coordinates for Central Asian languages	
	coordinates for Mongolic languages	
	draw languages as areas for pairmapper	
	georeference  language areas for Tatar, Bashqort, and Chuvash	
	georeference language areas for North Caucasus Turkic languages	
	georeference language areas for IE and Mongolic Caucasus-area languages	
	georeference language areas for North Caucasus languages	
	georeference language areas for misc Caucasus-area languages	
	georeference language areas for Kazakh	
	georeference language areas for Karakalpak and Kyrgyz	
	georeference language areas for  Uzbek and Uyghur	
	georeference language areas for Tajik and Turkmen	
	georeference language areas for Russian	
	georeference language areas for Ukrainian and Belorussian	
	split nor into nob and nno in pairviewer	
	add support to pairviewer for regional and alternate orthograpic modes	
	using language transducers for predictive text on Android	
	custom predictive text keyboards for Android	
	phenny/begiak ethnologue plugin	
	phenny/begiak url module localisation improvements	
	phenny/begiak mediawiki plugin(s) support for subsections	
	monodix support for stem-counting script	
		
		
		
		
		
