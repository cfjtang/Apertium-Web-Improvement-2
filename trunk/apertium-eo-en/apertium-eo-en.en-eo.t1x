<?xml version="1.0" encoding="utf-8"?>
<transfer default="chunk">
<!-- TODO
 make a transfer rule saying  DET + ADJ  can be a SN:
  The first was an animated feature     and
  the second was a TV live action version.

-->

  <section-def-cats>


    <!-- UNUOPAJ VORTOJ -->
    <def-cat n="more"><cat-item lemma="more" tags="det.qnt.*"/></def-cat>
    <def-cat n="to"><cat-item lemma="to" tags="pr"/></def-cat>
    <def-cat n="of"><cat-item lemma="of" tags="pr"/></def-cat>
    <def-cat n="all"><cat-item lemma="all" tags="predet.sp"/><cat-item lemma="all" tags="prn.tn.sp"/></def-cat>
    <def-cat n="the"><cat-item lemma="the" tags="det.def.*"/></def-cat>

    <def-cat n="a"><cat-item lemma="a" tags="det.ind.sg"/></def-cat>

    <def-cat n="not"><cat-item lemma="not" tags="adv"/></def-cat>

    <def-cat n="times"><cat-item lemma="time" tags="n.*"/></def-cat>

    <def-cat n="please"><cat-item lemma="please" tags="vblex.*"/><cat-item lemma="please" tags="adv"/></def-cat>





    <!-- KATEGORIOJ -->

    <def-cat n="cnjcoo"><cat-item tags="cnjcoo"/></def-cat>
    <def-cat n="cnjadv"><cat-item tags="cnjadv"/></def-cat>
    <def-cat n="cnjsub"><cat-item tags="cnjsub"/></def-cat>
    <def-cat n="guio"><cat-item tags="guio"/></def-cat>


    <def-cat n="prn">
      <cat-item tags="prn.rel.*"/>
      <cat-item tags="prn.itg.*"/>
      <cat-item tags="prn.tn.*"/>
    </def-cat>

    <!-- ^si<prn><ref><p3><m><sg> -->
    <def-cat n="prnref"><cat-item tags="prn.ref.*"/></def-cat>

    <def-cat n="prnpers"><cat-item lemma="prpers" tags="prn.*"/></def-cat>

    <!-- prpers<prn><obj><p1><mf><sg> -->
    <def-cat n="prnpers__sen_singularo">
      <cat-item lemma="prpers" tags="prn.*.*.*.sp"/>
      <cat-item lemma="prpers" tags="prn.*.*.*.pl"/>
    </def-cat>



    <def-cat n="adv">
      <cat-item tags="adv"/>
      <!-- added by Jacob: ^Kiam<adv><itg>$ -->
      <cat-item tags="adv.*"/>
    </def-cat>

    <def-cat n="adj">
      <cat-item tags="adj"/>
      <cat-item tags="adj.*"/>
    </def-cat>



    <def-cat n="nom">
      <cat-item tags="n.*"/>
      <cat-item tags="np.al.*"/>
      <cat-item tags="np.top.*"/>
      <!--
      <cat-item tags="np.ant.*"/>
      <cat-item tags="np.cog.*"/>-->
    </def-cat>

    <def-cat n="ant"><cat-item tags="np.ant.*"/></def-cat>
    <def-cat n="cog"><cat-item tags="np.cog.*"/></def-cat>


    <def-cat n="vblexinf">
      <cat-item tags="vblex.inf"/>
      <cat-item tags="vblex.sep.inf"/>
    </def-cat>

    <def-cat n="vblexger">
    <!--
        appealing:appeal<vblex><ger>
        appearing:appear<vblex><ger>
        appeasing:appease<vblex><ger>
        applying:apply<vblex><ger>
    -->
      <cat-item tags="vblex.ger"/>
      <cat-item tags="vblex.sep.ger"/>
    </def-cat>

    <!--
  could:can<vaux><past>
        can<vaux><pres>
        may<vaux><inf>
        might<vaux><inf>
        must<vaux><inf>
        shall<vaux><inf>
        should<vaux><inf>
        will<vaux><inf>
        would<vaux><inf>
    -->
    <def-cat n="vaux"><cat-item tags="vaux.*"/></def-cat>

    <!--
        am:be<vbser><pres><p1><sg>
        are:be<vbser><pres>
        be:be<vbser><inf>
        been:be<vbser><pp>
        being:be<vbser><ger>
        is:be<vbser><pres><p3><sg>
        was:be<vbser><past><p1><sg>
        was:be<vbser><past><p3><sg>
        were:be<vbser><past>
    -->
    <def-cat n="vbser"><cat-item lemma="be" tags="vbser.*"/></def-cat>

    <!--
        had got:have<vblex><past># got
        had got:have<vblex><pp># got
        had:have<vblex><past>
        had:have<vblex><pp>
        has got:have<vblex><pres><p3><sg># got
        has:have<vblex><pres><p3><sg>
        have got:have<vblex><inf># got
        have got:have<vblex><pres># got
        have:have<vblex><inf>
        have:have<vblex><pres>
        having got:have<vblex><ger># got
        having:have<vblex><ger>

        NOTHING in en.dix is vbhaver....?
    -->
    <def-cat n="vbhaver">
      <cat-item lemma="have" tags="vblex.*"/>
      <cat-item lemma="have" tags="vbhaver.*"/>
    </def-cat>

      <!--
        do:do<vbdo><pres>
        does:do<vbdo><pres><p3><sg>
        did:do<vbdo><past>
        don't:do<vbdo><pres>+not<adv>
        doesn't:do<vbdo><pres><p3><sg>+not<adv>
        didn't:do<vbdo><past>+not<adv>
      -->
    <def-cat n="vblex">
      <cat-item tags="vblex.*"/>
      <cat-item tags="vbdo.*"/>
      <!--      <cat-item tags="vbser.*"/>-->
      <cat-item tags="vbhaver.*"/>
      <cat-item lemma="be# over" tags="vbser.*"/>
    </def-cat>

    <def-cat n="vblex_vbser">
      <cat-item tags="vblex.*"/>
      <cat-item tags="vbdo.*"/>
      <!--      <cat-item tags="vbser.*"/>-->
      <cat-item tags="vbhaver.*"/>
      <cat-item lemma="be" tags="vbser.*"/>
    </def-cat>




    <!--
      <cat-item tags="det"/>
      <cat-item tags="det.*"/>
lt-expand apertium-eo-en.en.dix |  grep '<det>' | cut -f2 -d: | sort -u | sed 's/<sp>/.*/g' | sed 's/></./g'  | sed 's/</" tags="/g' | sed 's/^/    <cat-item lemma="/g' | sed 's/pl>/*/g' | sed 's/sg>/*/g' | sed 's/>//g' | sort -u | sed 's/$/"\/>/g' > x
lt-expand apertium-eo-en.en.dix |  grep '<det>' | grep ":>:" | cut -f3 -d: | sort -u | sed 's/<sp>/.*/g' | sed 's/></./g'  | sed 's/</" tags="/g' | sed 's/^/    <cat-item lemma="/g' | sed 's/pl>/*/g' | sed 's/sg>/*/g' | sed 's/>//g' | sort -u | sed 's/$/"\/>/g' >> x
sort -t '"' -k 3 x
      -->
    <def-cat n="det">
<!--
            <cat-item tags="det.*"/>
-->            
        <!--    <cat-item lemma="a" tags="det.ind.*"/>   DONT transfer this -->
            <cat-item tags="det.def.*"/>
            <cat-item tags="det.dem.*"/>
            <cat-item tags="det.ord.*"/>
            <cat-item tags="det.pos.*"/>
            <cat-item tags="det.qnt.*"/>

            <cat-item lemma="several" tags="det.ind.*"/>
            <cat-item lemma="various" tags="det.ind.*"/>

            <cat-item lemma="another" tags="det.ind.*"/>
            <cat-item lemma="any" tags="det.ind.*"/>
            <cat-item lemma="both" tags="det.ind.*"/>
            <cat-item lemma="each" tags="det.ind.*"/>
            <cat-item lemma="either" tags="det.ind.*"/>
            <cat-item lemma="every" tags="det.ind.*"/>
            <cat-item lemma="no" tags="det.ind.*"/>
            <cat-item lemma="other" tags="det.ind.*"/>
            <cat-item lemma="such" tags="det.ind.*"/>
            <cat-item lemma="the same" tags="det.ind.*"/>
            <cat-item lemma="whatever" tags="det.ind.*"/>
    </def-cat>


    <def-cat n="num">
      <cat-item tags="num"/>
      <cat-item tags="num.*"/>
    </def-cat>

    <def-cat n="num_sen_ord">
      <cat-item tags="num"/>
      <cat-item tags="num.percent"/>
      <cat-item tags="num.sp"/>
      <cat-item tags="num.sg"/>
      <cat-item tags="num.pl"/>
<!--      <cat-item tags="num.ord"/>   Jacob 6feb2009 forprenis, por igi  3rd<num><ord> of May-> 3a de majo, kaj ne  3a el majo -->
    </def-cat>

    <def-cat n="pr"><cat-item tags="pr"/></def-cat>
    <def-cat n="cm"><cat-item tags="cm"/></def-cat>
    <def-cat n="apos"><cat-item tags="apos"/></def-cat>
    <def-cat n="sent"><cat-item tags="sent"/></def-cat>

    <def-cat n="rel">
      <cat-item tags="rel.*"/>
    </def-cat>

    <def-cat n="preadv"><cat-item tags="preadv"/></def-cat>

    <def-cat n="predet">
      <cat-item tags="predet"/>
      <cat-item tags="predet.*"/>
    </def-cat>

    <def-cat n="gen"><cat-item tags="gen"/></def-cat>

    <def-cat n="genitive_possessors"> <!-- all that can fill the X in: X's dog  -->
      <cat-item tags=""/>        <!-- unknown words -->
      <cat-item tags="n.*"/>
      <cat-item tags="np.al.*"/> <!-- Apertium<np><al><sg> -->
      <cat-item tags="np.top.*"/><!-- Amsterdam<np><top><sg> -->
      <cat-item tags="np.cog.*"/><!-- Jekyll<np><cog><sg>  -->
      <cat-item tags="np.ant.*"/><!-- Susana:Susana<np><ant><f><sg>  Jacob:Jacob<np><ant><m><sg> -->
<!-- eble simple:      <cat-item tags="np.*"/>    ??  -->
    </def-cat>

    <!-- verb in present or imperative or past participle (to change the tense due to a bad election of the lexer) -->
    <def-cat n="c_vblex_pres">
      <cat-item tags="vblex.pres"/>
      <cat-item tags="vblex.imp"/>
      <cat-item tags="vblex.pp"/>
    </def-cat>

    <def-cat n="infpres">
      <cat-item tags="vblex.inf"/>
      <cat-item tags="vblex.pres"/>
      <cat-item tags="vblex.sep.inf"/>
      <cat-item tags="vblex.sep.pres"/>
      <cat-item tags="vbser.inf"/>
      <cat-item tags="vbser.pres"/>
    </def-cat>

    <def-cat n="do">
      <cat-item lemma="do" tags="vbdo.*"/>
      <cat-item lemma="do" tags="vblex.pri.*"/><!--ATENTU, nur nun ĉar la tagger eraras. -->
      <cat-item lemma="do" tags="vblex.pres"/>
      <cat-item lemma="do" tags="vblex.past"/>
      <cat-item lemma="do" tags="vblex.inf"/>
    </def-cat>


    <def-cat n="unknown"><cat-item tags=""/></def-cat>
  </section-def-cats>







  <section-def-attrs>
    <def-attr n="a_nom">
      <attr-item tags="n"/>
      <attr-item tags="np"/>
      <attr-item tags="np.al"/>
      <attr-item tags="np.ant"/>
      <attr-item tags="np.cog"/>
      <attr-item tags="np.top"/>
    </def-attr>
    <def-attr n="a_any">
      <attr-item tags="n"/>
      <attr-item tags="np"/>
    </def-attr>
    <def-attr n="a_prp">
      <attr-item tags="pr"/>
    </def-attr>
    <def-attr n="a_adj">
      <attr-item tags="adj"/>
      <attr-item tags="adj.pst"/>
      <attr-item tags="adj.sint.comp"/>
      <attr-item tags="adj.sint.sup"/>
      <attr-item tags="adj.itg"/>
    </def-attr>
    <def-attr n="a_vrb">
      <attr-item tags="vblex"/>
      <attr-item tags="vblex.sep"/>
      <attr-item tags="vbser"/>
      <attr-item tags="vaux"/>
    </def-attr>
    <def-attr n="a_verb">
      <attr-item tags="vblex"/>
      <attr-item tags="vblex.sep"/>
      <attr-item tags="vbser"/>
      <attr-item tags="vaux"/>
    </def-attr>


    <def-attr n="a_det">
      <attr-item tags="det.def"/>
      <attr-item tags="det.ind"/>
      <attr-item tags="det.pos"/>
      <attr-item tags="det.qnt"/>
      <attr-item tags="det.itg"/>
      <attr-item tags="det.dem"/>
    </def-attr>

    <def-attr n="a_prn">
      <attr-item tags="prn"/>
      <attr-item tags="prn.ref"/>
      <!-- Jacob added -->
      <attr-item tags="prn.itg"/>
      <attr-item tags="prn.subj"/>
      <attr-item tags="prn.obj"/>
      <attr-item tags="prn.tn"/>
    </def-attr>

    <def-attr n="a_prn__sen__subj_obj">
      <attr-item tags="prn"/>
      <attr-item tags="prn.ref"/>
      <attr-item tags="prn.itg"/>
      <attr-item tags="prn.tn"/>
    </def-attr>

    <def-attr n="a_tns">
      <attr-item tags="pri"/>
      <attr-item tags="imp"/>
      <attr-item tags="pp"/>
      <attr-item tags="pres"/>
      <attr-item tags="inf"/>
      <attr-item tags="ger"/>
      <attr-item tags="subs"/>
      <attr-item tags="pprs"/>
      <attr-item tags="fti"/>
      <attr-item tags="past"/>
    </def-attr>

    
    <def-attr n="a_gen">
      <attr-item tags="m"/>
      <attr-item tags="f"/>
      <attr-item tags="nt"/>
      <attr-item tags="mf"/>
      <attr-item tags="GD"/>
    </def-attr>
    <def-attr n="a_prs">
      <attr-item tags="p1"/>
      <attr-item tags="p2"/>
      <attr-item tags="p3"/>
    </def-attr>
    <def-attr n="a_nbr">
      <attr-item tags="sp"/>
      <attr-item tags="sg"/>
      <attr-item tags="pl"/>
      <attr-item tags="ND"/>
    </def-attr>
    <def-attr n="a_cas">
      <attr-item tags="nom"/>
      <attr-item tags="acc"/>
    </def-attr>


    <def-attr n="a_np_acr"><!-- taken from en-es.t1x, for use in macro firstWord -->
      <attr-item tags="np"/>
      <attr-item tags="acr"/>
    </def-attr>

  </section-def-attrs>







  <section-def-vars>
    <def-var n="numero"/>
    <def-var n="temps"/>

    <def-var n="adjectiu"/>        <!--- adjektivo - eble kun preadverbo (pli, plej) -->
    <def-var n="preadv_added"/>    <!-- if a "more" or "most" was added before an adj -->

    <def-var n="nomvar"/>
    <def-var n="tmp1"/>
    <def-var n="genere"/>
    <def-var n="tmp2"/>
    <def-var n="genere_second"/>
    <def-var n="caseFirstWord"/><!-- taken from en-es.t1x, for use in macro firstWord -->
    <def-var n="EOS" v="false"/><!-- taken from en-es.t1x, for use in macro firstWord -->
<!--    <def-var n="EOS" v="true"/> taken from en-es.t1x, for use in macro firstWord -->

    <def-var n="tipus_verb"/><!-- taken from en-ca.t1x, for use in macro tipus_verbs -->
    <def-var n="temps_chunk"/><!-- taken from en-ca.t1x, for use in macro "conj_verb_compost2" -->
    <def-var n="neg"/><!-- taken from en-ca.t1x, for use in macro "conj_verb_compost2" -->
    <def-var n="verbfinal"/><!-- taken from en-ca.t1x, for use in macro "conj_verb_compost2" -->
    <def-var n="chunk_name"/><!-- taken from en-ca.t1x, for use in macro "conj_verb_compost2" -->

    <def-var n="DEBUG" v=""/>

  </section-def-vars>

  <section-def-lists>

    <def-list n="adv_neg">
      <list-item v="not"/>
      <list-item v="never"/>
    </def-list>

    <def-list n="reportingverb"> <!-- verboj ne postulantaj THAT -->
      <list-item v="say"/>
      <list-item v="admit"/>
      <list-item v="agree"/>
      <list-item v="decide"/>
      <list-item v="deny"/>
      <list-item v="explain"/>
      <list-item v="insist"/>
      <list-item v="promise"/>
      <list-item v="recommend"/>
      <list-item v="suggest"/>
      <list-item v="point"/>
      <list-item v="think"/>
      <list-item v="believe"/>
      <list-item v="hope"/>
      <list-item v="fear"/>
      <list-item v="suppose"/>
    </def-list>


    <def-list n="netransitivaj"> <!-- ne-transitivaj verboj.  -->
      <list-item v="be"/>
      <list-item v="seem"/>
      <list-item v="become"/>
    </def-list>

  </section-def-lists>






  <section-def-macros>
    <def-macro n="firstWord" npar="1">
      <choose><!-- taken from en-es.t1x, for use in macro firstWord -->
	<when>
	  <test>
	    <equal><clip pos="1" side="sl" part="a_np_acr"/><lit v=""/></equal>
	  </test>
	  <choose>
	    <when>
	      <test>
		<equal><var n="EOS"/><lit v="true"/></equal>
	      </test>
	      <modify-case>
		<clip pos="1" side="tl" part="lem"/>
		<lit v="aa"/>
	      </modify-case>
	      <let><var n="caseFirstWord"/><lit v="Aa"/></let>
	    </when>
	    <otherwise>
	      <let><var n="caseFirstWord"/><lit v="aa"/></let>
	    </otherwise>
	  </choose>
	</when>
	<otherwise>
	  <let><var n="caseFirstWord"/><lit v="aa"/></let>
	</otherwise>
      </choose>
      <let><var n="EOS"/><lit v="false"/></let>
    </def-macro>





    <def-macro n="set_temps1" npar="1">
      <let><var n="temps"/><lit-tag v="UNKNOWN"/></let>
      <choose>
        <when>
          <test>
            <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="will"/></equal>
          </test>
          <let><var n="temps"/><lit-tag v="fti"/></let>
        </when>

        <when>
          <test>
            <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="would"/></equal>
          </test>
          <let><var n="temps"/><lit-tag v="cni"/></let>
        </when>
<!--
        <when>
          <test>
            <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="did"/></equal>
          </test>
          <let><var n="temps"/><lit-tag v="past"/></let>
        </when>
-->
      </choose>
    </def-macro>


    <def-macro n="set_numero1" npar="1">
      <let><var n="numero"/><lit-tag v="sg"/></let>
      <choose>
        <when>
          <test>
            <equal caseless="yes"><clip pos="1" side="tl" part="a_nbr"/><lit-tag v="sg"/></equal>
          </test>
          <let><var n="numero"/><lit-tag v="sg"/></let>
        </when>
        <when>
          <test>
            <equal caseless="yes"><clip pos="1" side="tl" part="a_nbr"/><lit-tag v="pl"/></equal>
          </test>
          <let><var n="numero"/><lit-tag v="pl"/></let>
        </when>
        <when><!-- do something more clever here -->
          <test>
            <equal caseless="yes"><clip pos="1" side="tl" part="a_nbr"/><lit-tag v="ND"/></equal>
          </test>
          <let><var n="numero"/><lit-tag v="sg"/></let>
        </when>
      </choose>
    </def-macro>


    <!-- kontrolas cxu la parametro estas konata vorto. 
         Se jes "nomvar" := <nom>. Se ne nomvar="".
         Tio cxu estas por eviti ke nekonataj vortoj ricevos tag'on kiu poste estas montrata. -->
    <def-macro n="set_nomvar_if_known1" npar="1">
      <let><var n="nomvar"/><lit v=""/></let>
      <choose>
        <when>
          <test>
            <or>
            <equal caseless="yes"><clip pos="1" side="tl" part="a_nbr"/><lit-tag v="sg"/></equal>
            <equal caseless="yes"><clip pos="1" side="tl" part="a_nbr"/><lit-tag v="pl"/></equal>
            <equal caseless="yes"><clip pos="1" side="tl" part="a_nbr"/><lit-tag v="sp"/></equal>
            <equal caseless="yes"><clip pos="1" side="tl" part="a_nbr"/><lit-tag v="ND"/></equal>
            </or>
          </test>
         <let><var n="nomvar"/><lit-tag v="nom"/></let>
        </when>
      </choose>
    </def-macro>


    <def-macro n="set_genere1" npar="1">
      <let><var n="genere"/><lit-tag v="GN"/></let>
      <choose>
        <when>
          <test>
            <equal caseless="yes"><clip pos="1" side="tl" part="a_gen"/><lit-tag v="m"/></equal>
          </test>
          <let><var n="genere"/><lit-tag v="m"/></let>
        </when>

        <when>
          <test>
            <equal caseless="yes"><clip pos="1" side="tl" part="a_gen"/><lit-tag v="f"/></equal>
          </test>
          <let><var n="genere"/><lit-tag v="f"/></let>
        </when>

        <when>
          <test>
            <equal caseless="yes"><clip pos="1" side="tl" part="a_gen"/><lit-tag v="mf"/></equal>
          </test>
          <let><var n="genere"/><lit-tag v="mf"/></let>
        </when>

        <when>
          <!-- do something more clever here -->
          <test>
            <equal caseless="yes"><clip pos="1" side="tl" part="a_gen"/><lit-tag v="GD"/></equal>
          </test>
          <let><var n="genere"/><lit-tag v="m"/></let>
          <let><clip pos="1" side="tl" part="a_gen"/><lit-tag v="m"/></let>
        </when>

        <otherwise>
          <let><var n="genere"/><lit-tag v="GN"/></let>
        </otherwise>
      </choose>
    </def-macro>




    <!-- Tiu cxi makroo rigardas anglan adjektivon kiel ^better/good<adj><sint><comp>$ kaj poste
         adjectiu = ^pli<preadv>$ ^bona<adj>
         preadv_added = yes   -->
    <def-macro n="set_adjectiu1" npar="1">
      <let><var n="adjectiu"/><lit v=""/></let>
      <let><var n="preadv_added"/><lit v=""/></let>
      <choose>
        <when><!-- ^better/good<adj><sint><comp>$ -->
          <test><equal><clip pos="1" side="sl" part="a_adj"/><lit-tag v="adj.sint.comp"/></equal></test>
          <let><var n="adjectiu"/><concat><!-- ^pli<preadv>$ ^bona<adj><3><4>$ -->
                <lit v="pli"/><lit-tag v="preadv"/><lit v="$ ^"/>
                <clip pos="1" side="tl" part="lem"/><lit-tag v="adj.3.4"/>
                </concat></let>
          <let><var n="preadv_added"/><lit v="yes"/></let>
        </when>

        <when><!-- ^best/good<adj><sint><sup>$ -->
          <test><equal><clip pos="1" side="sl" part="a_adj"/><lit-tag v="adj.sint.sup"/></equal></test>
          <let><var n="adjectiu"/><concat><!-- ^plej<preadv>$ ^bona<adj><3><4>$ -->
                <lit v="plej"/><lit-tag v="preadv"/><lit v="$ ^"/>
                <clip pos="1" side="tl" part="lem"/><lit-tag v="adj.3.4"/>
                </concat></let>
          <let><var n="preadv_added"/><lit v="yes"/></let>
        </when>

        <when>
         <test><equal><clip pos="1" side="tl" part="a_adj"/><lit-tag v="adj"/></equal></test>
          <let><var n="adjectiu"/><concat><!-- ^bona<adj><2><3><4>$ -->
                <clip pos="1" side="tl" part="lem"/><lit-tag v="adj.3.4"/>
                </concat></let>
        </when>

        <otherwise><!-- ^good<adj><sint>$  aux ^blue<adj>$   - ^bona<adj><2><3><4>$ -->
          <let><var n="adjectiu"/><concat><clip pos="1" side="tl" part="lem"/><lit-tag v="adj.3.4"/></concat></let>
        </otherwise>
      </choose>
    </def-macro>




    <!-- Tiu cxi makroo rigardas anglan adjektivon kaj la rilatan substantivon kaj poste
         adjectiu = ^pli<preadv>$ ^bona<adj>
         preadv_added = yes   -->
    <def-macro n="set_adjectiu2" npar="2">
      <let><var n="adjectiu"/><lit v=""/></let>
      <let><var n="preadv_added"/><lit v=""/></let>
      <choose>
        <when><!-- ^better/good<adj><sint><comp>$ -->
          <test><equal><clip pos="1" side="sl" part="a_adj"/><lit-tag v="adj.sint.comp"/></equal></test>
          <let><var n="adjectiu"/><concat><!-- ^pli<preadv>$ ^bona<adj><3><4>$ -->
                <get-case-from pos="1"><lit v="pli"/></get-case-from><lit-tag v="preadv"/><lit v="$ ^"/>
                <clip pos="1" side="tl" part="lem"/><lit-tag v="adj"/><clip pos="2" side="tl" part="a_nbr"/><lit-tag v="2"/>
                </concat></let>
          <let><var n="preadv_added"/><lit v="yes"/></let>
        </when>

        <when><!-- ^best/good<adj><sint><sup>$ -->
          <test><equal><clip pos="1" side="sl" part="a_adj"/><lit-tag v="adj.sint.sup"/></equal></test>
          <let><var n="adjectiu"/><concat><!-- ^plej<preadv>$ ^bona<adj><3><4>$ -->
                <get-case-from pos="1"><lit v="plej"/></get-case-from><lit-tag v="preadv"/><lit v="$ ^"/>
                <clip pos="1" side="tl" part="lem"/><lit-tag v="adj"/><clip pos="2" side="tl" part="a_nbr"/><lit-tag v="2"/>
                </concat></let>
          <let><var n="preadv_added"/><lit v="yes"/></let>
        </when>

        <when>
         <test><equal><clip pos="1" side="tl" part="a_adj"/><lit-tag v="adj"/></equal></test>
          <let><var n="adjectiu"/><concat><!-- ^bona<adj><2><3><4>$ -->
                <clip pos="1" side="tl" part="lem"/><lit-tag v="adj"/><clip pos="2" side="tl" part="a_nbr"/><lit-tag v="2"/>
                </concat></let>
        </when>

        <otherwise><!-- ^good<adj><sint>$  aux ^blue<adj>$   - ^bona<adj><2><3><4>$ -->
          <let><var n="adjectiu"/><concat><!-- ^bona<adj><2><3><4>$ -->
                <clip pos="1" side="tl" part="lem"/><lit-tag v="adj"/><clip pos="2" side="tl" part="a_nbr"/><lit-tag v="2"/>
                </concat></let>
        </otherwise>
      </choose>
    </def-macro>



    <def-macro n="set_tipus_verbs1" npar="1">
      <choose>
	<when>
	  <test>
	    <in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="netransitivaj"/></in>
	  </test>
	  <let><var n="tipus_verb"/><lit-tag v="netransitiva"/></let>
	</when>
	<when>
	  <test>
	    <or>
	      <equal caseless="yes"><clip pos="1" side="sl" part="lemh"/><lit v="be"/></equal>
	      <equal caseless="yes"><clip pos="1" side="sl" part="lemh"/><lit v="seem"/></equal>
	    </or>
	  </test>
	  <let><var n="tipus_verb"/><lit-tag v="netransitiva2"/></let>
	</when>
	<when>
	  <test>
	    <or>
	      <equal caseless="yes"><clip pos="1" side="sl" part="lemh"/><lit v="like"/></equal>
	      <equal caseless="yes"><clip pos="1" side="tl" part="lemh"/><lit v="encantar"/></equal>
	    </or>
	  </test>
	  <let><var n="tipus_verb"/><lit-tag v="like"/></let>
	</when>
	<when>
	  <test>
	    <or>
	      <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="be# sorry"/></equal>
	      <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="be# very sorry"/></equal>
	    </or>
	  </test>
	  <let><var n="tipus_verb"/><lit-tag v="sorry"/></let>
	</when>
	<when>
	  <test>
	    <in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="reportingverb"/></in>
	  </test>
	  <let><var n="tipus_verb"/><lit-tag v="reporting"/></let>
	</when>
	<otherwise>
	  <!-- <let><var n="tipus_verb"/><clip pos="1" side="tl" part="a_verb"/></let> -->
	  <let><var n="tipus_verb"/><lit-tag v="aliaj"/></let>
	</otherwise>
      </choose>
    </def-macro>

    <!--Tiu makroo devas esti aplikata en la reguloj, post la makroo tipus_verbs. 
        Ĝi atribuas al la variablo 'pronom' la valoron de la pronomo, 
        kiun devas havi la pronominalaj verboj.
         pronominalaj verboj ne ekzistas en Eo nek en En, do mi forigas. Jacob
    <def-macro n="pron1" npar="1">
      <let><var n="pronom"/><lit v=""/></let>
      <choose><!-*-envia el pronom en els verbs pronominals -*->
        <when>
          <test>
            <equal><var n="tipus_verb"/><lit-tag v="pron"/></equal>
          </test>
          <let><var n="pronom"/><lit v="prpers"/></let>
          <append n="pronom">
            <lit-tag v="prn.pro"/>
            <lit-tag v="4"/>
            <lit-tag v="mf"/>
            <lit-tag v="5"/>
            <lit v="$ ^"/>
          </append>
        </when>
      </choose>
    </def-macro>
-->


<!--konjugacias verbon konsistanta en helpverbo kaj nepersona formo (will come).
pos 1= do, will, shall aŭ would.
pos 2= nekonjugaciita verbo
La rezulto estas unu sola leksika formo (venos):
verbfinal = pensi<3><4><5>
 -->
      <def-macro n="conj_verb_compost2" npar="2">
        <let>
          <var n="verbfinal"/>
          <concat>
            <clip pos="2" side="tl" part="lemh"/>
            <clip pos="2" side="tl" part="a_verb"/>
            <lit-tag v="3"/>
            <lit-tag v="4"/>
            <lit-tag v="5"/>
            <clip pos="2" side="tl" part="lemq"/>
          </concat>
        </let>
	<choose>
	  <when>
	    <test>
	      <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="do"/></equal>
	    </test>
	    <choose>
	      <when>
		<test>
                  <or>
		    <equal><clip pos="1" side="sl" part="a_tns"/><lit-tag v="pres"/></equal>
		    <equal><clip pos="1" side="sl" part="a_tns"/><lit-tag v="inf"/></equal>
                  </or>
		</test>
		<let><var n="temps_chunk"/><lit-tag v="pres"/></let>
	      </when>
	      <when>
		<test>
		    <equal><clip pos="1" side="sl" part="a_tns"/><lit-tag v="past"/></equal>
		</test>
		<let><var n="temps_chunk"/><lit-tag v="past"/></let>
	      </when>
	      <otherwise><let><var n="temps_chunk"/><concat><lit-tag v="ERROR1_"/><clip pos="1" side="sl" part="a_tns"/></concat></let></otherwise>
	    </choose>
	  </when>
	  <otherwise>
	    <choose>		
	  <when>
	    <test>
	      <or>
		<equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="will"/></equal>
		<equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="shall"/></equal>
	      </or>
	    </test>
	    <let><var n="temps_chunk"/><lit-tag v="fti"/></let>
	  </when>
	  <when>
	    <test>
	      <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="would"/></equal>
	    </test>
	    <let><var n="temps_chunk"/><lit-tag v="cni"/></let>
	  </when>
          <otherwise><let><var n="temps_chunk"/><concat><lit-tag v="ERROR2_"/><clip pos="1" side="sl" part="a_tns"/></concat></let></otherwise>
	</choose>
      </otherwise>
    </choose>
  </def-macro>



<!-- Por rigardi, ĉu la blanko havas aŭ ne havas formaton. 
     Tiu makroo estas necesa en la reguloj, en kiuj malaperas vorto por decidi, 
     ĉu la blanko de la vorto devas esti forigita aŭ konservita. 
     Se ĝi havas formaton, necesas konservi ĝin; se ne, indas viŝi, 
     por ke ne aperu du sinsekvaj blankoj. -->
    <def-macro n="f_bcond1" npar="1">
      <choose>
        <when>
          <test>
            <not>
              <equal><b pos="1"/><lit v=" "/></equal>
            </not>
          </test>
          <out>
            <b pos="1"/>
          </out>
        </when>
      </choose>
    </def-macro>


  </section-def-macros>


  <section-rules>



    <rule comment="REGLA: DET:a  - the derminier 'a' should just be deleted. Having this rule makes it possible to avoid handling 'a' in all the other rules">
      <pattern>
        <pattern-item n="a"/>
      </pattern>
      <action>
 <!--       <call-macro n="firstWord"><with-param pos="1"/></call-macro> -->
      </action>
    </rule>


    <!-- Sintagmas nominales -->
    <rule comment="REGLA: NOM">
      <pattern>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_genere1"><with-param pos="1"/></call-macro>
            <out>
              <chunk name="nom" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN.nom"/></tag>
<!--                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="1" side="tl" part="a_nbr"/></tag> 
                  <tag><lit-tag v="nom"/></tag>-->
                </tags>
                <lu>
<!--              <clip pos="1" side="tl" part="whole"/> TODO: Kial ne funkcias? -->
                  <clip pos="1" side="tl" part="lem"/>
                  <clip pos="1" side="tl" part="tags"/>
<!--
                  <clip pos="1" side="tl" part="a_nom"/>
                  <clip pos="1" side="tl" part="a_gen"/>
                  <clip pos="1" side="tl" part="a_nbr"/> -->
                  <lit-tag v="2"/>
                </lu>
              </chunk>
            </out>
      </action>
    </rule>




    <rule comment="REGLA: prnref   - himself, themselves">
      <pattern>
        <pattern-item n="prnref"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_genere1"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="prnref" case="caseFirstWord">
            <tags>
                  <tag><lit-tag v="SN.nom"/></tag>
<!--            
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="tl" part="a_nbr"/></tag>
              <tag><lit-tag v="nom"/></tag>
-->              
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
              <lit-tag v="2"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>




    <rule comment="REGLA: NOM/ANT 's NOM:  Jacob's dog   => hundo de Jacob">
      <pattern>
        <pattern-item n="genitive_possessors"/>
        <pattern-item n="gen"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_nomvar_if_known1"><with-param pos="1"/></call-macro>
        <call-macro n="set_genere1"><with-param pos="1"/></call-macro>
        <let><var n="tmp2"/><var n="genere"/></let>
        <call-macro n="set_genere1"><with-param pos="3"/></call-macro>
            <out>
              <chunk name="nom_gen_nom" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN.nom"/></tag>
                </tags>
                <lu>
                  <clip pos="3" side="tl" part="lem"/>    <!-- hundo -->
                  <clip pos="3" side="tl" part="tags"/>
                  <lit-tag v="2"/>
                </lu>
                <b/>
                  <lu>
                    <clip pos="2" side="tl" part="whole"/> <!-- de -->
                  </lu>
                <b pos="2"/>
                <lu>
                  <clip pos="1" side="tl" part="lem"/>     <!-- Jacob -->
                  <clip pos="1" side="tl" part="tags"/>
                  <var n="nomvar"/>
                </lu>
              </chunk>
            </out>
      </action>
    </rule>


    <rule comment="REGLA: DET NOM/ANT 's NOM:  his gardener's dog => la hundo de lia gxardenisto">
      <pattern>
        <pattern-item n="det"/>
        <pattern-item n="genitive_possessors"/>
        <pattern-item n="gen"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
         <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_numero1"><with-param pos="2"/></call-macro>
        <call-macro n="set_nomvar_if_known1"><with-param pos="2"/></call-macro>
        <call-macro n="set_genere1"><with-param pos="2"/></call-macro>
        <let><var n="tmp2"/><var n="genere"/></let>
        <call-macro n="set_genere1"><with-param pos="4"/></call-macro>
        <modify-case><clip pos="1" side="tl" part="lem"/><lit v="aa"/></modify-case>                  
            <out>
              <chunk name="det_nom_gen_det_nom" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN.nom"/></tag>
                </tags>
                <lu>
                  <get-case-from pos="1"><lit v="la"/></get-case-from><lit-tag v="det.def.sp"/> <!-- la -->
                </lu>
                <b/>
                <lu>
                  <clip pos="4" side="tl" part="lem"/>              <!-- hundo -->
                  <clip pos="4" side="tl" part="tags"/>
                  <lit-tag v="2"/>
                </lu>
                <b/>
                  <lu>
                    <clip pos="3" side="tl" part="whole"/>          <!-- de -->
                  </lu>
                <b pos="3"/>
                <lu>
                  <clip pos="1" side="tl" part="lem"/>              <!-- lia -->
                  <clip pos="1" side="tl" part="a_det"/>
                  <clip pos="1" side="tl" part="a_nom"/>
                  <clip pos="1" side="tl" part="a_gen"/>
                  <var n="numero"/> <!-- <clip pos="2" side="tl" part="a_nbr"/> funkcius, sed ne je nekonataj vortoj -->
                  <lit-tag v="nom"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="2" side="tl" part="lem"/>              <!-- gxardenisto -->
                  <clip pos="2 " side="tl" part="tags"/>
                  <var n="nomvar"/>
                </lu>
              </chunk>
            </out>
      </action>
    </rule>



<!-- Its Not clear this rule makes more harm than good

    <rule comment="REGLA: NOM/ANT NOM/ANT 's NOM:  Jacob Smith's dog   => hundo de Jacob Smith">
      <pattern>
        <pattern-item n="genitive_possessors"/>
        <pattern-item n="genitive_possessors"/>
        <pattern-item n="gen"/>
        <pattern-item n="nom"/>
      </pattern>
...
-->


    <rule comment="REGLA: DET NOM/ANT NOM/ANT 's NOM:  his garden man's dog   - La hundo de lia ĝardeno viro ">
      <pattern>
        <pattern-item n="det"/>
        <pattern-item n="genitive_possessors"/>
        <pattern-item n="genitive_possessors"/>
        <pattern-item n="gen"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_numero1"><with-param pos="2"/></call-macro>
        <call-macro n="set_nomvar_if_known1"><with-param pos="2"/></call-macro>
        <let><var n="tmp1"/><var n="nomvar"/></let>
        <call-macro n="set_genere1"><with-param pos="2"/></call-macro>
        <let><var n="tmp2"/><var n="genere"/></let>

        <call-macro n="set_nomvar_if_known1"><with-param pos="3"/></call-macro>
        <call-macro n="set_genere1"><with-param pos="3"/></call-macro>
        <let><var n="genere_second"/><var n="genere"/></let>

        <call-macro n="set_genere1"><with-param pos="5"/></call-macro>
        <modify-case><clip pos="1" side="tl" part="lem"/><lit v="aa"/></modify-case>                  
            <out>
              <chunk name="det_nom_gen_det_nom_nom" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN.nom"/></tag>
                </tags>
                <lu>
                  <get-case-from pos="1"><lit v="la"/></get-case-from><lit-tag v="det.def.sp"/> <!-- la -->
                </lu>
                <b/>
                <lu>
                  <clip pos="5" side="tl" part="lem"/>            <!-- hundo -->
                  <clip pos="5" side="tl" part="tags"/>
                  <lit-tag v="2"/>
                </lu>
                <b/>
                  <lu>
                    <clip pos="4" side="tl" part="whole"/>        <!-- de -->
                  </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="1" side="tl" part="lem"/>              <!-- lia -->
                  <clip pos="1" side="tl" part="a_det"/>
                  <clip pos="1" side="tl" part="a_nom"/>
                  <clip pos="1" side="tl" part="a_gen"/>
                  <var n="numero"/> <!-- <clip pos="2" side="tl" part="a_nbr"/> funkcius, sed ne je nekonataj vortoj -->
                  <lit-tag v="nom"/>
                </lu>
                <b pos="4"/>
                <lu>
                  <clip pos="2" side="tl" part="lem"/>            <!-- ĝardeno -->
                  <clip pos="2" side="tl" part="tags"/>
<!--                  
                  <clip pos="2" side="tl" part="lem"/>
                  <clip pos="2" side="tl" part="a_nom"/>
                  <clip pos="2" side="tl" part="a_gen"/>
                  <clip pos="3" side="tl" part="a_nbr"/> -->
                  <var n="tmp1"/>
                </lu>
                <b pos="2"/>
                <lu>
                  <clip pos="3" side="tl" part="lem"/>            <!-- viro  -->
                  <clip pos="3" side="tl" part="tags"/>
                  <var n="nomvar"/>
                </lu>
              </chunk>
            </out>
      </action>
    </rule>







    <rule comment="REGLA: NOM NOM">
      <pattern>
        <pattern-item n="nom"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_genere1"><with-param pos="1"/></call-macro>
        <let><var n="tmp2"/><var n="genere"/></let>
        <call-macro n="set_genere1"><with-param pos="2"/></call-macro>
            <out>
              <chunk name="nom_nom" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN.nom"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lem"/>
                  <clip pos="1" side="tl" part="tags"/>
                  <lit-tag v="nom"/>
                </lu>
                <lu>
                  <lit v="-"/>
                  <lit-tag v="guio"/>
                </lu>
                <!-- <b pos="1"/> inserts a space. Could just ONE space be deleted and rest of the blank be inserted. Francis: not that i'm aware of -->
                <lu>
                  <clip pos="2" side="tl" part="lem"/>
                  <clip pos="2" side="tl" part="tags"/>
                  <lit-tag v="2"/>
                </lu>
              </chunk>
            </out>
      </action>
    </rule>


    <rule comment="REGLA: ANT">
      <pattern>
        <pattern-item n="ant"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="ant" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN.nom"/></tag>
            </tags>
            <lu><!--               <clip pos="1" side="tl" part="whole"/>  -->
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="tags"/>
              <lit-tag v="2"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: COG">
      <pattern>
        <pattern-item n="cog"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="cog" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN.nom"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="tags"/>
              <lit-tag v="2"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: ANT COG">
      <pattern>
        <pattern-item n="ant"/>
        <pattern-item n="cog"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="ant_cog" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN.nom"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="tags"/>
              <lit-tag v="2"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lem"/>
              <clip pos="2" side="tl" part="tags"/>
              <lit-tag v="2"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: ANT ANT">
      <pattern>
        <pattern-item n="ant"/>
        <pattern-item n="ant"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="ant_ant" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN.nom"/></tag>
            </tags>
            <lu>
                  <clip pos="1" side="tl" part="lem"/>
                  <clip pos="1" side="tl" part="tags"/>
              <lit-tag v="2"/>
            </lu>
            <b pos="1"/>
            <lu>
                  <clip pos="2" side="tl" part="lem"/>
                  <clip pos="2" side="tl" part="tags"/>
              <lit-tag v="2"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: COG COG">
      <pattern>
        <pattern-item n="cog"/>
        <pattern-item n="cog"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="ant_ant" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN.nom"/></tag>
            </tags>
            <lu>
                  <clip pos="1" side="tl" part="lem"/>
                  <clip pos="1" side="tl" part="tags"/>
              <lit-tag v="2"/>
            </lu>
            <b pos="1"/>
            <lu>
                  <clip pos="2" side="tl" part="lem"/>
                  <clip pos="2" side="tl" part="tags"/>
              <lit-tag v="2"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: ANT ANT COG COG">
      <pattern>
        <pattern-item n="ant"/>
        <pattern-item n="ant"/>
        <pattern-item n="cog"/>
        <pattern-item n="cog"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="ant_ant_cog_cog" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN.nom"/></tag>
            </tags>
            <lu>
                  <clip pos="1" side="tl" part="lem"/>
                  <clip pos="1" side="tl" part="tags"/>
              <lit-tag v="2"/>
            </lu>
            <b pos="1"/>
            <lu>
                  <clip pos="2" side="tl" part="lem"/>
                  <clip pos="2" side="tl" part="tags"/>
              <lit-tag v="2"/>
            </lu>
            <lu>
                  <clip pos="3" side="tl" part="lem"/>
                  <clip pos="3" side="tl" part="tags"/>
              <lit-tag v="3"/>
            </lu>
            <b pos="3"/>
            <lu>
                  <clip pos="3" side="tl" part="lem"/>
                  <clip pos="3" side="tl" part="tags"/>
              <lit-tag v="4"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: ANT COG COG">
      <pattern>
        <pattern-item n="ant"/>
        <pattern-item n="cog"/>
        <pattern-item n="cog"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="ant_cog_cog" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN.nom"/></tag>
            </tags>
            <lu>
                  <clip pos="1" side="tl" part="lem"/>
                  <clip pos="1" side="tl" part="tags"/>
              <lit-tag v="2"/>
            </lu>
            <b pos="1"/>
            <lu>
                  <clip pos="2" side="tl" part="lem"/>
                  <clip pos="2" side="tl" part="tags"/>
              <lit-tag v="2"/>
            </lu>
            <lu>
                  <clip pos="3" side="tl" part="lem"/>
                  <clip pos="3" side="tl" part="tags"/>
              <lit-tag v="3"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: ANT ANT COG">
      <pattern>
        <pattern-item n="ant"/>
        <pattern-item n="ant"/>
        <pattern-item n="cog"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="ant_ant_cog" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN.nom"/></tag>
            </tags>
            <lu>
                  <clip pos="1" side="tl" part="lem"/>
                  <clip pos="1" side="tl" part="tags"/>
              <lit-tag v="2"/>
            </lu>
            <b pos="1"/>
            <lu>
                  <clip pos="2" side="tl" part="lem"/>
                  <clip pos="2" side="tl" part="tags"/>
              <lit-tag v="2"/>
            </lu>
            <lu>
                  <clip pos="3" side="tl" part="lem"/>
                  <clip pos="3" side="tl" part="tags"/>
              <lit-tag v="3"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: ANT GUIO ANT COG">
      <pattern>
        <pattern-item n="ant"/>
        <pattern-item n="guio"/>
        <pattern-item n="ant"/>
        <pattern-item n="cog"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="ant-ant_cog" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN.nom"/></tag>
            </tags>
            <lu>
                  <clip pos="1" side="tl" part="lem"/>
                  <clip pos="1" side="tl" part="tags"/>
              <lit-tag v="2"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>   <!--   - guio    -->
            </lu>
            <b pos="2"/>
            <lu>
                  <clip pos="3" side="tl" part="lem"/>
                  <clip pos="3" side="tl" part="tags"/>
              <lit-tag v="3"/>
            </lu>
            <b pos="3"/>
            <lu>
                  <clip pos="4" side="tl" part="lem"/>
                  <clip pos="4" side="tl" part="tags"/>
              <lit-tag v="4"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: ANT COG GUIO COG">
      <pattern>
        <pattern-item n="ant"/>
        <pattern-item n="cog"/>
        <pattern-item n="guio"/>
        <pattern-item n="cog"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="ant_cog-cog" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN.nom"/></tag>
            </tags>
            <lu>
                  <clip pos="1" side="tl" part="lem"/>
                  <clip pos="1" side="tl" part="tags"/>
              <lit-tag v="2"/>
            </lu>
            <b pos="1"/>
            <lu>
                  <clip pos="2" side="tl" part="lem"/>
                  <clip pos="2" side="tl" part="tags"/>
              <lit-tag v="2"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
            <b pos="3"/>
            <lu>
                  <clip pos="4" side="tl" part="lem"/>
                  <clip pos="4" side="tl" part="tags"/>
              <lit-tag v="4"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: ANT GUIO ANT COG GUIO COG">
      <pattern>
        <pattern-item n="ant"/>
        <pattern-item n="guio"/>
        <pattern-item n="ant"/>
        <pattern-item n="cog"/>
        <pattern-item n="guio"/>
        <pattern-item n="cog"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="ant-ant_cog-cog" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN.nom"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
              <lit-tag v="2"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="whole"/>
              <lit-tag v="3"/>
            </lu>
            <b pos="3"/>
            <lu>
              <clip pos="4" side="tl" part="whole"/>
              <lit-tag v="4"/>
            </lu>
            <b pos="4"/>
            <lu>
              <clip pos="5" side="tl" part="whole"/>
            </lu>
            <b pos="5"/>
            <lu>
              <clip pos="5" side="tl" part="whole"/>
              <lit-tag v="5"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>



    <rule comment="REGLA: Prn">
      <pattern>
        <pattern-item n="prn"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_numero1"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="prn" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN.nom"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_prn"/>
              <var n="numero"/>
              <lit-tag v="2"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: PrnPers">
      <pattern>
        <pattern-item n="prnpers"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="prnpers" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN.nom"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
              <lit-tag v="2"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>



    <rule comment="REGLA: DET">
      <pattern>
        <pattern-item n="det"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
            <out>
              <chunk name="det" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SD.nom"/></tag>
                </tags>
                <lu>
                      <clip pos="1" side="tl" part="whole"/>
                      <lit-tag v="2"/>
                </lu>
              </chunk>
            </out>
      </action>
    </rule>


    <rule comment="REGLA: more NOM, f.eks. 'more tea'  to 'Pli da teo'">
      <pattern>
        <pattern-item n="more"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_genere1"><with-param pos="2"/></call-macro>
            <out>
              <chunk name="det_nom" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN.nom"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="whole"/>
                  <!-- <lit-tag v="2"/> no, keep <nom> -->
                  <lit-tag v="nom"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="2" side="tl" part="whole"/>
                  <!-- <lit-tag v="2"/> no, keep <nom> -->
                  <lit-tag v="nom"/>
                </lu>
              </chunk>
            </out>
      </action>
    </rule>



<!--
    <rule comment="REGLA: a NOM">
      <pattern>
        <pattern-item n="a"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_genere1"><with-param pos="2"/></call-macro>
            <out>
              <chunk name="nom" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><var n="genere"/></tag>
                  <tag><clip pos="2" side="tl" part="a_nbr"/></tag>
                  <tag><lit-tag v="nom"/></tag>
                </tags>
                <b pos="1"/>
                <lu>
                  <clip pos="2" side="tl" part="lem"/>
                  <clip pos="2" side="tl" part="a_nom"/>
                  <lit-tag v="2"/>
                  <clip pos="2" side="tl" part="a_nbr" link-to="3"/>
                  <lit-tag v="4"/>
                </lu>
              </chunk>
            </out>
      </action>
    </rule>
-->



    <rule comment="REGLA: DET NOM">
      <pattern>
        <pattern-item n="det"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_genere1"><with-param pos="2"/></call-macro>
            <out>
              <chunk name="det_nom" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN.nom"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lem"/>
                  <clip pos="1" side="tl" part="a_det"/>
                  <clip pos="2" side="tl" part="a_nbr"/>
                  <lit-tag v="2"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="2" side="tl" part="lem"/>
                  <clip pos="2" side="tl" part="tags"/>
                  <lit-tag v="2"/>
                </lu>
              </chunk>
            </out>
      </action>
    </rule>




    <rule comment="REGLA: a NOM NOM">
      <pattern>
        <pattern-item n="a"/>
        <pattern-item n="nom"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_genere1"><with-param pos="2"/></call-macro>
        <let><var n="tmp2"/><var n="genere"/></let>
        <call-macro n="set_genere1"><with-param pos="3"/></call-macro>
            <out>
              <chunk name="nom_nom" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN.nom"/></tag>
                </tags>
                <!-- <b pos="1"/> inserts a space. Best: could just ONE space be deleted and rest of the blank be inserted? -->
                <lu>
                  <clip pos="2" side="tl" part="whole"/>
                  <lit-tag v="2"/>
                </lu>
                <lu>
                  <lit v="-"/>
                  <lit-tag v="guio"/>
                </lu>
                <!-- <b pos="2"/> inserts a space. Best: could just ONE space be deleted and rest of the blank be inserted? -->
                <lu>
                  <clip pos="3" side="tl" part="whole"/>
                  <lit-tag v="2"/>
                </lu>
              </chunk>
            </out>
      </action>
    </rule>



    <rule comment="REGLA: DET NOM NOM">
      <pattern>
        <pattern-item n="det"/>
        <pattern-item n="nom"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_genere1"><with-param pos="2"/></call-macro>
        <let><var n="tmp2"/><var n="genere"/></let>
        <call-macro n="set_genere1"><with-param pos="3"/></call-macro>
            <out>
              <chunk name="det_nom_nom" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN.nom"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lem"/>
                  <clip pos="1" side="tl" part="a_det"/>
                  <clip pos="3" side="tl" part="a_nbr"/>
                  <lit-tag v="2"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="2" side="tl" part="lem"/>
                  <clip pos="2" side="tl" part="tags"/>
                  <lit-tag v="nom"/>
                </lu>
                <lu>
                  <lit v="-"/>
                  <lit-tag v="guio"/>
                </lu>
                <!-- <b pos="2"/> inserts a space. Could just ONE space be deleted and rest of the blank be inserted. Francis: not that i'm aware of -->
                <lu>
                  <clip pos="3" side="tl" part="lem"/>
                  <clip pos="3" side="tl" part="tags"/>
                  <lit-tag v="2"/>
                </lu>
              </chunk>
            </out>
      </action>
    </rule>



    <rule comment="REGLA: a ADJ NOM - a good house  - bona domo">
      <pattern>
        <pattern-item n="a"/>
        <pattern-item n="adj"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_genere1"><with-param pos="3"/></call-macro>
        <let><var n="numero"/><clip pos="3" side="tl" part="a_nbr"/></let>
        <call-macro n="set_adjectiu2"><with-param pos="2"/><with-param pos="3"/></call-macro>

        <choose>
          <when>
            <test><equal><var n="preadv_added"/><lit v=""/></equal></test>
            <let><var n="chunk_name"/><lit v="adj_nom"/></let>
          </when>
          <otherwise><!-- a<det><ind><sg> better house  - pli bona domo -->
            <let><var n="chunk_name"/><lit v="preadv_adj_nom"/></let>
          </otherwise>
        </choose>

            <out>
              <chunk namefrom="chunk_name" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN.nom"/></tag>
                </tags>
                <lu>
                  <var n="adjectiu"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="3" side="tl" part="lem"/>
                  <clip pos="3" side="tl" part="tags"/>
                  <lit-tag v="2"/>
                </lu>
              </chunk>
            </out>

      </action>
    </rule>



    <rule comment="REGLA: DET ADJ NOM">
      <pattern>
        <pattern-item n="det"/>
        <pattern-item n="adj"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_genere1"><with-param pos="3"/></call-macro>
        <call-macro n="set_adjectiu2"><with-param pos="2"/><with-param pos="3"/></call-macro>
        <let><var n="numero"/><clip pos="3" side="tl" part="a_nbr"/></let>
        <choose>
          <when>
            <test><equal><var n="preadv_added"/><lit v=""/></equal></test>
            <let><var n="chunk_name"/><lit v="det_adj_nom"/></let>
          </when>
          <otherwise>
            <let><var n="chunk_name"/><lit v="det_preadv_adj_nom"/></let>
          </otherwise>
        </choose>
            <out>
              <chunk namefrom="chunk_name" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN.nom"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lem"/>
                  <clip pos="1" side="tl" part="a_det"/>
                  <var n="numero"/>
                  <lit-tag v="2"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <var n="adjectiu"/>
                </lu>
                <b pos="2"/>
                <lu>
                  <clip pos="3" side="tl" part="lem"/>
                  <clip pos="3" side="tl" part="tags"/>
                  <lit-tag v="2"/>
                </lu>
              </chunk>
            </out>
      </action>
    </rule>


    <rule comment="REGLA: ADJ NOM">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_adjectiu2"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="set_genere1"><with-param pos="2"/></call-macro>

        <choose>
          <when>
            <test><equal><var n="preadv_added"/><lit v=""/></equal></test>
            <let><var n="chunk_name"/><lit v="adj_nom"/></let>
          </when>
          <otherwise>
            <let><var n="chunk_name"/><lit v="preadv_adj_nom"/></let>
          </otherwise>
        </choose>

            <out>
              <chunk namefrom="chunk_name" case="caseFirstWord">
            <tags>
                <tag><lit-tag v="SN.nom"/></tag>
            </tags>
            <lu>
                <var n="adjectiu"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lem"/>
              <clip pos="2" side="tl" part="tags"/>
              <lit-tag v="2"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>




    <rule comment="REGLA: ADJ ADJ NOM">
      <pattern>
        <pattern-item n="adj"/>
        <pattern-item n="adj"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_adjectiu2"><with-param pos="1"/><with-param pos="3"/></call-macro>
        <call-macro n="set_genere1"><with-param pos="3"/></call-macro>
        <let><var n="tmp1"/><var n="preadv_added"/></let>
        <let><var n="tmp2"/><var n="adjectiu"/></let>
        <call-macro n="set_adjectiu2"><with-param pos="2"/><with-param pos="3"/></call-macro>

        <choose>
          <when>
            <test><and>
                    <equal><var n="tmp1"/><lit v=""/></equal>
                    <equal><var n="preadv_added"/><lit v=""/></equal>
            </and></test>
            <let><var n="chunk_name"/><lit v="adj_adj_nom"/></let>
          </when>
          <when>
            <test><or>
                    <equal><var n="tmp1"/><lit v=""/></equal>
                    <equal><var n="preadv_added"/><lit v=""/></equal>
            </or></test>
            <let><var n="chunk_name"/><lit v="preadv_adj_adj_nom"/></let>
          </when>
          <otherwise>
            <let><var n="chunk_name"/><lit v="preadv_adj_preadv_adj_nom"/></let>
          </otherwise>
        </choose>

        <out>
          <chunk namefrom="chunk_name" case="caseFirstWord">
            <tags>
                <tag><lit-tag v="SN.nom"/></tag>
            </tags>
            <lu>
                <var n="tmp2"/>
            </lu>
            <b pos="1"/>
            <lu>
                <var n="adjectiu"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="lem"/>
              <clip pos="3" side="tl" part="tags"/>
              <lit-tag v="2"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>



    <!-- Sintagmas adjetivos -->

    <rule comment="REGLA: ADJ">
      <pattern>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_adjectiu2"><with-param pos="1"/><with-param pos="1"/></call-macro>
        <call-macro n="set_genere1"><with-param pos="1"/></call-macro>
        <choose>
          <when>
            <test><equal><var n="preadv_added"/><lit v=""/></equal></test>
            <let><var n="chunk_name"/><lit v="adj"/></let>
          </when>
          <otherwise>
            <let><var n="chunk_name"/><lit v="preadv_adj"/></let>
          </otherwise>
        </choose>

        <!--  Tio cxi estas fusxeta:  adjectiu=bona<adj><2> 
        kaj mi bezonas finfine ^bona<adj><sg><nom>$, do mi metas la <sg> ekster la chunk'o!
        Preadv_adj<SN><sg><nom>{^pli<preadv>$ ^bona<adj><2><3>$}
        -->
        <out>
          <chunk namefrom="chunk_name" case="caseFirstWord">
            <tags>
                <tag><lit-tag v="SN.sg.nom"/></tag>
            </tags>
            <lu>
                <var n="adjectiu"/><lit-tag v="3"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>





    <!-- Sintagmas verbales -->
    <rule>
      <pattern>
        <pattern-item n="vblex"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_tipus_verbs1"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
	      <tag><var n="tipus_verb"/></tag>
              <tag><clip pos="1" side="tl" part="a_tns"/></tag>
              <tag><clip pos="1" side="tl" part="a_prs"/></tag>
              <tag><clip pos="1" side="tl" part="a_nbr"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_vrb"/>
              <clip pos="1" side="tl" part="a_tns"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: VBSER">
      <pattern>
        <pattern-item n="vbser"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_tipus_verbs1"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="ser" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
	      <tag><var n="tipus_verb"/></tag>
              <tag><clip pos="1" side="tl" part="a_tns"/></tag>
              <tag><clip pos="1" side="tl" part="a_prs"/></tag>
              <tag><clip pos="1" side="tl" part="a_nbr"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_vrb"/>
              <clip pos="1" side="tl" part="a_tns"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: VBSER not">
      <pattern>
        <pattern-item n="vbser"/>
        <pattern-item n="not"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_tipus_verbs1"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="ser" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
	      <tag><var n="tipus_verb"/></tag>
              <tag><clip pos="1" side="tl" part="a_tns"/></tag>
              <tag><clip pos="1" side="tl" part="a_prs"/></tag>
              <tag><clip pos="1" side="tl" part="a_nbr"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_vrb"/>
              <clip pos="1" side="tl" part="a_tns"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>




  <rule comment="RULE: please + vblex in present => please + vblex in imperative">
     <pattern>
       <pattern-item n="please"/>
       <pattern-item n="c_vblex_pres"/>
     </pattern>
     <action>
       <call-macro n="set_tipus_verbs1"><with-param pos="2"/></call-macro>
       <out>
         <chunk name="verb" case="caseFirstWord">
           <tags>
              <tag><lit-tag v="SV"/></tag>
	      <tag><var n="tipus_verb"/></tag>
              <tag><clip pos="1" side="tl" part="a_tns"/></tag>
              <tag><clip pos="1" side="tl" part="a_prs"/></tag>
              <tag><clip pos="1" side="tl" part="a_nbr"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_vrb"/>
              <clip pos="1" side="tl" part="a_tns"/>
              <clip pos="1" side="tl" part="a_prs"/>
              <clip pos="1" side="tl" part="a_nbr"/>
            </lu>
          </chunk>
         <b pos="1"/>
         <chunk name="verb" case="caseFirstWord">
           <tags>
              <tag><clip pos="2" side="tl" part="a_tns"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lem"/>
              <clip pos="2" side="tl" part="a_vrb"/>
              <lit-tag v="inf"/>
            </lu>
          </chunk>
        </out>
     </action>
  </rule>


    <rule comment="REGLA: do ADV VERB (I do not think -> mi ne pensas. I do always think -> mi ĉiam pensas)">    
      <pattern>
	<pattern-item n="do"/> 
	<pattern-item n="adv"/>
	<pattern-item n="infpres"/>
      </pattern>
      <action>
	<call-macro n="firstWord"><with-param pos="1"/></call-macro>	
	<call-macro n="set_tipus_verbs1"><with-param pos="3"/></call-macro>
        <let><var n="chunk_name"/><lit v="verbcj"/></let>
	<call-macro n="conj_verb_compost2"><with-param pos="1"/><with-param pos="3"/></call-macro>	
	<choose>
	  <when>
	    <test><!-- se ADV estas "not" aux "never"... -->
	      <in caseless="yes"><clip pos="2" side="sl" part="lem"/><list n="adv_neg"/></in>
	    </test>
	    <let><var n="neg"/><lit-tag v="NEG"/></let>
	  </when>
	  <otherwise>
	    <let><var n="neg"/><lit v=""/></let>
	  </otherwise>
	</choose>
	<out>
	  <chunk name="adv" case="caseFirstWord">
	    <tags>
	      <tag><clip pos="2" side="tl" part="a_adv"/></tag>
	      <tag><var n="neg"/></tag>
	    </tags>
	    <lu>
	      <clip pos="2" side="tl" part="whole"/>
	    </lu>
	  </chunk>
	  <b pos="1"/>
	  <chunk namefrom="chunk_name">
	    <tags>	       
	      <tag><lit-tag v="SV"/></tag>
	      <tag><var n="tipus_verb"/></tag>
	      <tag><var n="temps_chunk"/></tag>
	    </tags> 
	    <lu>
	      <var n="verbfinal"/>
	    </lu>
	  </chunk>
	</out>
	<call-macro n="f_bcond1"><with-param pos="2"/></call-macro>
      </action>
    </rule>





    <rule comment="REGLA: to VBLEXinf">
      <pattern><!-- to run, to swim -->
        <pattern-item n="to"/>
        <pattern-item n="vblexinf"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_tipus_verbs1"><with-param pos="2"/></call-macro>
        <out>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
	      <tag><var n="tipus_verb"/></tag>
              <tag><clip pos="2" side="tl" part="a_tns"/></tag>
              <tag><clip pos="2" side="tl" part="a_prs"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_vrb"/>
              <clip pos="2" side="tl" part="a_tns"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>



    <rule comment="REGLA: be VBLEXger">
      <pattern><!-- ^be/be<vbser><inf>$ ^being/be<vbser><ger>$  ^been/be<vbser><pp>$
                    ^applying/apply<vblex><ger>$  -->
        <pattern-item n="vbser"/>
        <pattern-item n="vblexger"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_tipus_verbs1"><with-param pos="2"/></call-macro>
        <out>
          <chunk name="verb_vbger" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
	      <tag><var n="tipus_verb"/></tag>
              <tag><clip pos="2" side="tl" part="a_tns"/></tag>
              <tag><clip pos="2" side="tl" part="a_prs"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
              <clip pos="1" side="tl" part="a_vrb"/>
              <clip pos="1" side="tl" part="a_tns"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_vrb"/>
              <clip pos="2" side="tl" part="a_tns"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

<!--
can:can<vaux><pres>
could:can<vaux><past>
will:will<vaux><inf>
shall:shall<vaux><inf>
would:would<vaux><inf>
must:must<vaux><inf>
should:should<vaux><inf>
may:may<vaux><inf>
might:might<vaux><inf>
-->

    <rule comment="REGLA: VAUX VBLEX">
      <pattern>
        <pattern-item n="vaux"/>
<!--        <pattern-item n="vblex"/> -->
        <pattern-item n="vblex_vbser"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_tipus_verbs1"><with-param pos="2"/></call-macro>
        <let><var n="temps"/><clip pos="2" side="sl" part="a_tns"/></let>
        <choose>
          <when>
            <test>
              <or>
                <!-- will wash  => lavos     -    would wash => lavus -->
                <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="will"/></equal>
                <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="would"/></equal>
              </or>
            </test>
            <call-macro n="set_temps1"><with-param pos="1"/></call-macro>
            <out>
              <chunk name="verb" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
                  <tag><var n="tipus_verb"/></tag>
                  <tag><var n="temps"/></tag>
                  <tag><clip pos="2" side="tl" part="a_prs"/></tag>
                  <tag><clip pos="2" side="tl" part="a_nbr"/></tag>
                </tags>
                <lu>
                  <clip pos="2" side="tl" part="lemh"/>
                  <clip pos="2" side="tl" part="a_vrb"/>
                  <var n="temps"/>
                  <clip pos="2" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>

          <when>
            <test>
              <or>
                <and><!-- could:can<vaux><past>  wash => povus lavi -->
                  <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="can"/></equal>
                  <equal caseless="yes"><clip pos="1" side="sl" part="a_tns"/><lit-tag v="past"/></equal>
                </and>
                <!-- might:might<vaux><inf> wash  =>  ???-->
                <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="might"/></equal>
              </or>
            </test>
            <let><var n="temps"/><lit-tag v="cni"/></let>
            <out>
              <chunk name="vaux_verb" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
	          <tag><var n="tipus_verb"/></tag>
                  <tag><var n="temps"/></tag>
                  <tag><clip pos="2" side="tl" part="a_prs"/></tag>
                  <tag><clip pos="2" side="tl" part="a_nbr"/></tag>
                </tags>
                <lu>
                  <lit v="povi"/>
                  <!-- Fran's proposal: <lit-tag v="vaux.pres"/>-->
                  <lit-tag v="vaux.cni"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="2" side="tl" part="lemh"/>
                  <clip pos="2" side="tl" part="a_vrb"/>
                  <lit-tag v="inf"/>
                  <clip pos="2" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>

          <otherwise>
            <out>
              <chunk name="vaux_verb" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
	          <tag><var n="tipus_verb"/></tag>
                  <tag><var n="temps"/></tag>
                  <tag><clip pos="2" side="tl" part="a_prs"/></tag>
                  <tag><clip pos="2" side="tl" part="a_nbr"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="whole"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="2" side="tl" part="lemh"/>
                  <clip pos="2" side="tl" part="a_vrb"/>
                  <var n="temps"/>
                  <clip pos="2" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>


    <rule comment="REGLA: VAUX ADV VBLEX">
      <pattern>
        <pattern-item n="vaux"/>
        <pattern-item n="adv"/>
<!--        <pattern-item n="vblex"/> -->
        <pattern-item n="vblex_vbser"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_tipus_verbs1"><with-param pos="3"/></call-macro>
        <let><var n="temps"/><clip pos="3" side="sl" part="a_tns"/></let>
        <choose>
          <when>
            <test>
              <or>
                <!-- will not wash  => ne lavos     -    would not wash => ne lavus -->
                <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="will"/></equal>
                <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="would"/></equal>
              </or>
            </test>
            <call-macro n="set_temps1"><with-param pos="1"/></call-macro>
            <out>
              <chunk name="verb" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
	          <tag><var n="tipus_verb"/></tag>
                  <tag><var n="temps"/></tag>
                  <tag><clip pos="3" side="tl" part="a_prs"/></tag>
                  <tag><clip pos="3" side="tl" part="a_nbr"/></tag>
                </tags>
                <lu>
                  <clip pos="2" side="tl" part="whole"/>
                </lu>
                <b pos="2"/>
                <lu>
                  <clip pos="3" side="tl" part="lemh"/>
                  <clip pos="3" side="tl" part="a_vrb"/>
                  <var n="temps"/>
                  <clip pos="3" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>


          <when>
            <test>
              <or>
                <and>
                  <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="can"/></equal>
                  <equal caseless="yes"><clip pos="1" side="sl" part="a_tns"/><lit-tag v="past"/></equal>
                </and>
                <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="might"/></equal>
              </or>
            </test>
            <let><var n="temps"/><lit-tag v="cni"/></let>
            <out>
              <chunk name="vaux_verb" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
	          <tag><var n="tipus_verb"/></tag>
                  <tag><var n="temps"/></tag>
                  <tag><clip pos="3" side="tl" part="a_prs"/></tag>
                  <tag><clip pos="3" side="tl" part="a_nbr"/></tag>
                </tags>
                <lu>
                  <clip pos="2" side="tl" part="whole"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <lit v="povi"/>
                  <lit-tag v="vaux.cni"/>
                </lu>
                <b pos="2"/>
                <lu>
                  <clip pos="3" side="tl" part="lemh"/>
                  <clip pos="3" side="tl" part="a_vrb"/>
                  <lit-tag v="inf"/>
                  <clip pos="3" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>

          <otherwise>
            <out>
              <chunk name="vaux_verb" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
	          <tag><var n="tipus_verb"/></tag>
                  <tag><var n="temps"/></tag>
                  <tag><clip pos="3" side="tl" part="a_prs"/></tag>
                  <tag><clip pos="3" side="tl" part="a_nbr"/></tag>
                </tags>
                <lu>
                  <clip pos="2" side="tl" part="whole"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="1" side="tl" part="whole"/>
                </lu>
                <b pos="2"/>
                <lu>
                  <clip pos="3" side="tl" part="lemh"/>
                  <clip pos="3" side="tl" part="a_vrb"/>
                  <var n="temps"/>
                  <clip pos="3" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>



    <rule comment="REGLA: VAUX ADV ADV VBLEX">
      <pattern>
        <pattern-item n="vaux"/>
        <pattern-item n="adv"/>
        <pattern-item n="adv"/>
<!--        <pattern-item n="vblex"/> -->
        <pattern-item n="vblex_vbser"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_tipus_verbs1"><with-param pos="4"/></call-macro>
        <let><var n="temps"/><clip pos="4" side="sl" part="a_tns"/></let>
        <choose>
          <when>
            <test>
              <or>
                <!-- will wash  => lavos     -    would wash => lavus -->
                <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="will"/></equal>
                <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="would"/></equal>
              </or>
            </test>
            <call-macro n="set_temps1"><with-param pos="1"/></call-macro>
            <out>
              <chunk name="verb" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
	          <tag><var n="tipus_verb"/></tag>
                  <tag><var n="temps"/></tag>
                  <tag><clip pos="4" side="tl" part="a_prs"/></tag>
                  <tag><clip pos="4" side="tl" part="a_nbr"/></tag>
                </tags>
                <lu>
                  <clip pos="2" side="tl" part="whole"/>
                </lu>
                <b pos="2"/>
                <lu>
                  <clip pos="3" side="tl" part="whole"/>
                </lu>
                <b pos="3"/>
                <lu>
                  <clip pos="4" side="tl" part="lemh"/>
                  <clip pos="4" side="tl" part="a_vrb"/>
                  <var n="temps"/>
                  <clip pos="4" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>

          <when>
            <test>
              <or>
                <and>
                  <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="can"/></equal>
                  <equal caseless="yes"><clip pos="1" side="sl" part="a_tns"/><lit-tag v="past"/></equal>
                </and>
                <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="might"/></equal>
              </or>
            </test>
            <let><var n="temps"/><lit-tag v="cni"/></let>
            <out>
              <chunk name="vaux_verb" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
	          <tag><var n="tipus_verb"/></tag>
                  <tag><var n="temps"/></tag>
                  <tag><clip pos="4" side="tl" part="a_prs"/></tag>
                  <tag><clip pos="4" side="tl" part="a_nbr"/></tag>
                </tags>
                <lu>
                  <clip pos="2" side="tl" part="whole"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="3" side="tl" part="whole"/>
                </lu>
                <b pos="2"/>
                <lu>
                  <lit v="povi"/>
                  <lit-tag v="vaux.cni"/>
                </lu>
                <b pos="3"/>
                <lu>
                  <clip pos="4" side="tl" part="lemh"/>
                  <clip pos="4" side="tl" part="a_vrb"/>
                  <lit-tag v="inf"/>
                  <clip pos="4" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>

          <otherwise>
            <out>
              <chunk name="vaux_verb" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
	          <tag><var n="tipus_verb"/></tag>
                  <tag><var n="temps"/></tag>
                  <tag><clip pos="4" side="tl" part="a_prs"/></tag>
                  <tag><clip pos="4" side="tl" part="a_nbr"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="whole"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="2" side="tl" part="whole"/>
                </lu>
                <b pos="2"/>
                <lu>
                  <clip pos="3" side="tl" part="whole"/>
                </lu>
                <b pos="3"/>
                <lu>
                  <clip pos="4" side="tl" part="lemh"/>
                  <clip pos="4" side="tl" part="a_vrb"/>
                  <var n="temps"/>
                  <clip pos="4" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>



    <rule comment="REGLA: VAUX VBHAVER VBLEX">
      <pattern>
        <pattern-item n="vaux"/>
        <pattern-item n="vbhaver"/>
<!--        <pattern-item n="vblex"/> -->
        <pattern-item n="vblex_vbser"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_tipus_verbs1"><with-param pos="3"/></call-macro>
        <let><var n="temps"/><clip pos="2" side="sl" part="a_tns"/></let>
        <choose>

          <when>
            <test>
              <or>
                <!-- will wash  => lavos     -    would wash => lavus -->
                <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="will"/></equal>
                <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="would"/></equal>
              </or>
            </test>
            <call-macro n="set_temps1"><with-param pos="1"/></call-macro>
            <out>
              <chunk name="verb_pp" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
	          <tag><var n="tipus_verb"/></tag>
                  <tag><var n="temps"/></tag>
                  <tag><clip pos="2" side="tl" part="a_prs"/></tag>
                  <tag><clip pos="2" side="tl" part="a_nbr"/></tag>
                </tags>
                <lu>
                  <lit v="esti"/><lit-tag v="vbser"/>
                  <var n="temps"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="3" side="tl" part="lemh"/>
                  <clip pos="3" side="tl" part="a_vrb"/>
                  <lit-tag v="pp3"/>
                  <clip pos="3" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>


          <when>
            <!-- I may have washed. =>mi eble lavis-->
            <test>
              <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="may"/></equal>
            </test>
            <let><var n="temps"/><lit-tag v="past"/></let>
            <out>
              <chunk name="verb" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
	          <tag><var n="tipus_verb"/></tag>
                  <tag><var n="temps"/></tag>
                  <tag><clip pos="2" side="tl" part="a_prs"/></tag>
                  <tag><clip pos="2" side="tl" part="a_nbr"/></tag>
                  <tag><lit-tag v="DEBUG_MAY"/></tag>
                </tags>
                <lu>
                  <lit v="eble"/><lit-tag v="adv"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="3" side="tl" part="lemh"/>
                  <clip pos="3" side="tl" part="a_vrb"/>
                  <var n="temps"/>
                  <clip pos="3" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>


          <when>
            <!-- I might have washed. =>mi eble lavus-->
            <test>
              <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="might"/></equal>
            </test>
            <let><var n="temps"/><lit-tag v="cni"/></let>
            <out>
              <chunk name="verb" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
	          <tag><var n="tipus_verb"/></tag>
                  <tag><var n="temps"/></tag>
                  <tag><clip pos="2" side="tl" part="a_prs"/></tag>
                  <tag><clip pos="2" side="tl" part="a_nbr"/></tag>
                </tags>
                <lu>
                  <lit v="eble"/>
                  <lit-tag v="adv"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="3" side="tl" part="lemh"/>
                  <clip pos="3" side="tl" part="a_vrb"/>
                  <var n="temps"/>
                  <clip pos="3" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>



          <when>
            <test><!-- I could have washed => Mi povis lavi. OK TODO  "Mi povintus lavi" would be better-->
            <or>
              <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="can"/></equal>
              <equal caseless="yes"><clip pos="1" side="sl" part="a_tns"/><lit v="past"/></equal>
            </or>
            </test>
            <let><var n="temps"/><lit-tag v="cni"/></let>
            <out>
              <chunk name="vaux_pp" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
	          <tag><var n="tipus_verb"/></tag>
                  <tag><var n="temps"/></tag>
                  <tag><clip pos="2" side="tl" part="a_prs"/></tag>
                  <tag><clip pos="2" side="tl" part="a_nbr"/></tag>
                </tags>
                <lu>
                  <lit v="povi"/>
                  <lit-tag v="vaux.past"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="3" side="tl" part="lemh"/>
                  <clip pos="3" side="tl" part="a_vrb"/>
                  <lit-tag v="inf"/>
                  <clip pos="3" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>


          <otherwise><!--  must have been, should have led,  must have observed,  must have felt -->
            <out>
              <chunk name="vaux_verb" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
	          <tag><var n="tipus_verb"/></tag>
                  <tag><var n="temps"/></tag>
                  <tag><clip pos="2" side="tl" part="a_prs"/></tag>
                  <tag><clip pos="2" side="tl" part="a_nbr"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="whole"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="2" side="tl" part="lemh"/>
                  <clip pos="2" side="tl" part="a_vrb"/>
                  <var n="temps"/>
                  <clip pos="2" side="tl" part="lemq"/>
                </lu>
                <b pos="2"/>
                <lu>
                  <clip pos="3" side="tl" part="whole"/>
                </lu>
                <!-- <b/><lu><lit v="DEBUG_vaux_verb_IKKE_GENKENDT"/></lu>-->
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>




    <rule comment="REGLA: VAUX VBSER VBLEXGER">
      <pattern>
        <pattern-item n="vaux"/>
        <pattern-item n="vbser"/>
        <pattern-item n="vblexger"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_tipus_verbs1"><with-param pos="3"/></call-macro>
        <let><var n="temps"/><clip pos="2" side="sl" part="a_tns"/></let>
        <choose>
          <when>
            <test>
              <or>
                <!-- I will/would be washing my hands  => Mi estos/estus lavanta miajn manojn  -->
                <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="will"/></equal>
                <equal caseless="yes"><clip pos="1" side="sl" part="lem"/><lit v="would"/></equal>
              </or>
            </test>
            <call-macro n="set_temps1"><with-param pos="1"/></call-macro>
            <out>
              <chunk name="verb_vbger" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
	          <tag><var n="tipus_verb"/></tag>
                  <tag><var n="temps"/></tag>
                  <tag><clip pos="2" side="tl" part="a_prs"/></tag>
                  <tag><clip pos="2" side="tl" part="a_nbr"/></tag>
                </tags>
                <lu>
                  <clip pos="2" side="tl" part="lemh"/>
                  <clip pos="2" side="tl" part="a_vrb"/>
                  <var n="temps"/>
                  <clip pos="2" side="tl" part="lemq"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="3" side="tl" part="whole"/>
                </lu>
              </chunk>
            </out>
          </when>


          <otherwise><!-- can be describing=>povas esti priskribanta  OK
                          may be confusing=>povi esti konfuzanta TODO: povAS esti konfuzanta -->
            <out>
              <chunk name="vaux_verb" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
	          <tag><var n="tipus_verb"/></tag>
                  <tag><var n="temps"/></tag>
                  <tag><clip pos="2" side="tl" part="a_prs"/></tag>
                  <tag><clip pos="2" side="tl" part="a_nbr"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="whole"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="2" side="tl" part="lemh"/>
                  <clip pos="2" side="tl" part="a_vrb"/>
                  <var n="temps"/>
                  <clip pos="2" side="tl" part="lemq"/>
                </lu>
                <b pos="2"/>
                <lu>
                  <clip pos="3" side="tl" part="whole"/>
                </lu>
                <!-- <b/><lu><lit v="DEBUG_vaux_vbser_vblexger"/></lu> -->
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>





    <rule>
      <pattern>
        <pattern-item n="adv"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="Adv"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>







    <!-- Conjunctions -->
    <rule>
      <pattern>
        <pattern-item n="cnjcoo"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="cnjcoo" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="CC"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule>
      <pattern>
        <pattern-item n="cnjadv"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="cnjadv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="CA"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule>
      <pattern>
        <pattern-item n="cnjsub"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="CS" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="NUM"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule>
      <pattern>
        <pattern-item n="cm"/>
      </pattern>
      <action>
        <out>
          <chunk name="cm">
            <tags>
              <tag><lit-tag v="CC"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: reset variables">
      <pattern>
        <pattern-item n="sent"/>
      </pattern>
      <action>
	<choose>
	  <when>
	    <test>
	      <not>
		<or>
		  <equal><clip pos="1" side="sl" part="lem"/><lit v=";"/></equal>
		  <equal><clip pos="1" side="sl" part="lem"/><lit v=":"/></equal>
		</or>
	      </not>
	    </test>
	    <let><var n="EOS"/><lit v="true"/></let>
	  </when>
	</choose>
        <out>
          <chunk name="sent">
            <tags>
              <tag><lit-tag v="SENT"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule>
      <pattern>
        <pattern-item n="num"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="num" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule>
      <pattern>
        <pattern-item n="pr"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="pr" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PREP"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>




    <rule comment="REGLA NUM of      5 of => 5 el ">
      <pattern>
        <pattern-item n="num_sen_ord"/>
        <pattern-item n="of"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="num" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
          <b pos="1"/>
          <chunk name="pr">
            <tags>
              <tag><lit-tag v="PREP"/></tag>
            </tags>
                <lu>
                  <lit v="el"/>
                  <lit-tag v="pr"/>
                </lu>
          </chunk>
        </out>
      </action>
    </rule>



    <rule comment="REGLA NUM times NUM  5 times 8 => 5 oble 8 ">
      <pattern>
        <pattern-item n="num_sen_ord"/>
        <pattern-item n="times"/>
        <pattern-item n="num_sen_ord"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="num" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
                  <lit v="oble"/><lit-tag v="adv"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>



    <rule comment="REGLA NUM time   5 times => 5 fojoj, 5th time => 5a fojo,   ">
      <pattern>
        <pattern-item n="num"/>
        <pattern-item n="times"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="num" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <b pos="1"/>
            <lu>
                <lit v="fojo"/><lit-tag v="n"/><clip pos="2" side="tl" part="a_nbr"/><lit-tag v="nom"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

<!--
    <rule comment="REGLA NUM of the     5 of the => 5 el la ">
      <pattern>
        <pattern-item n="num"/>
        <pattern-item n="of"/>
        <pattern-item n="the"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="num" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
          <b pos="1"/>
          <chunk name="pr">
            <tags>
              <tag><lit-tag v="PREP"/></tag>
            </tags>
                <lu>
                  <lit v="el"/>
                  <lit-tag v="pr"/>
                </lu>
          </chunk>
          <b pos="2"/>
          <chunk name="det">
            <tags>
              <tag><lit-tag v="SD"/></tag>
              <tag><lit-tag v="sp"/></tag>
            </tags>
                <lu>
                  <clip pos="3" side="tl" part="whole"/>
                </lu>
          </chunk>
        </out>
      </action>
    </rule>
-->



    <rule>
      <pattern>
        <pattern-item n="rel"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="rel" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="REL"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule>
      <pattern>
        <pattern-item n="preadv"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="preadv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PREADV"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule>
      <pattern>
        <pattern-item n="predet"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="predet" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PREDET"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: non-recognized genitive ('s) fallback :  XXX's YYY   => XXX'a YYY">
      <pattern>
        <pattern-item n="gen"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="gen" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="GEN"/></tag>
            </tags>
            <lu>
              <lit v="a"/><lit-tag v="gen"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>





    <rule>
      <pattern>
        <pattern-item n="unknown"/>
      </pattern>
      <action>
        <call-macro n="firstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="unknown" case="caseFirstWord">
            <tags>
              <tag><lit v=""/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


  </section-rules>
</transfer>
